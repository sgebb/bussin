@if (IsVisible)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Send Message</h5>
                    <button type="button" class="btn-close" @onclick="OnClose"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Message Body</label>
                        <textarea class="form-control" rows="5" @bind="MessageBody" placeholder='Plain text or JSON: {"key": "value"}'></textarea>
                        <small class="form-text text-muted">Enter plain text or valid JSON. Content type will be set automatically.</small>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Additional Properties (Optional)</label>
                        <textarea class="form-control" rows="3" @bind="MessageProperties" placeholder='{"customProp": "value"}'></textarea>
                        <small class="form-text text-muted">JSON object with custom properties to add to the message.</small>
                    </div>

                    <!-- Scheduling Options -->
                    <div class="card mb-3">
                        <div class="card-header py-1 px-2" style="cursor: pointer;" @onclick="ToggleScheduling">
                            <small>⏰ Schedule Delivery</small>
                            <span class="float-end">@(enableScheduling ? "▼" : "▶")</span>
                        </div>
                        @if (enableScheduling)
                        {
                            <div class="card-body p-2">
                                <div class="mb-2">
                                    <label class="form-label small mb-1">Relative Time</label>
                                    <input type="text" class="form-control form-control-sm" @bind="relativeTime" placeholder="e.g., +5m, +2h, +1d" />
                                    <small class="form-text text-muted">
                                        Examples: +5m (5 minutes), +2h (2 hours), +1d (1 day), +30s (30 seconds)
                                    </small>
                                </div>
                                <div class="mb-0">
                                    <label class="form-label small mb-1">Or Absolute Time (UTC)</label>
                                    <input type="datetime-local" class="form-control form-control-sm" @bind="absoluteTime" />
                                </div>
                                @if (!string.IsNullOrEmpty(scheduleError))
                                {
                                    <div class="alert alert-danger alert-sm mt-2 mb-0 p-1">
                                        <small>@scheduleError</small>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnClose">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="HandleSend" disabled="@IsSending">
                        @if (IsSending)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Send
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsSending { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<(string body, string? properties)> OnSend { get; set; }
    [Parameter] public EventCallback<(string body, string? properties, DateTime scheduledTime)> OnSendScheduled { get; set; }

    private string messageBody = "";
    private string messageProperties = "";
    private bool enableScheduling = false;
    private string relativeTime = "";
    private DateTime? absoluteTime = null;
    private string? scheduleError = null;

    public string MessageBody
    {
        get => messageBody;
        set => messageBody = value;
    }

    public string MessageProperties
    {
        get => messageProperties;
        set => messageProperties = value;
    }

    private void ToggleScheduling()
    {
        enableScheduling = !enableScheduling;
        if (!enableScheduling)
        {
            scheduleError = null;
        }
    }

    private async Task HandleSend()
    {
        scheduleError = null;

        if (enableScheduling)
        {
            DateTime? scheduledTime = null;

            // Try relative time first
            if (!string.IsNullOrWhiteSpace(relativeTime))
            {
                scheduledTime = ParseRelativeTime(relativeTime);
                if (scheduledTime == null)
                {
                    scheduleError = "Invalid relative time format. Use +5m, +2h, +1d, etc.";
                    return;
                }
            }
            // Fall back to absolute time
            else if (absoluteTime.HasValue)
            {
                scheduledTime = absoluteTime.Value.ToUniversalTime();
            }
            else
            {
                scheduleError = "Please specify either a relative time or absolute time for scheduling.";
                return;
            }

            if (scheduledTime.Value <= DateTime.UtcNow)
            {
                scheduleError = "Scheduled time must be in the future.";
                return;
            }

            await OnSendScheduled.InvokeAsync((messageBody, string.IsNullOrWhiteSpace(messageProperties) ? null : messageProperties, scheduledTime.Value));
        }
        else
        {
            await OnSend.InvokeAsync((messageBody, string.IsNullOrWhiteSpace(messageProperties) ? null : messageProperties));
        }

        // Reset form
        messageBody = "";
        messageProperties = "";
        enableScheduling = false;
        relativeTime = "";
        absoluteTime = null;
    }

    private DateTime? ParseRelativeTime(string input)
    {
        input = input.Trim();
        if (!input.StartsWith("+"))
            return null;

        var valueStr = input.Substring(1, input.Length - 2);
        var unit = input[input.Length - 1];

        if (!int.TryParse(valueStr, out int value))
            return null;

        return unit switch
        {
            's' => DateTime.UtcNow.AddSeconds(value),
            'm' => DateTime.UtcNow.AddMinutes(value),
            'h' => DateTime.UtcNow.AddHours(value),
            'd' => DateTime.UtcNow.AddDays(value),
            _ => null
        };
    }

    protected override void OnParametersSet()
    {
        if (!IsVisible)
        {
            messageBody = "";
            messageProperties = "";
            enableScheduling = false;
            relativeTime = "";
            absoluteTime = null;
            scheduleError = null;
        }
    }
}
