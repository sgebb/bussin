@page "/"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop
@using System.Text.Json
@inject IAuthenticationService AuthService
@inject IAzureResourceService ResourceService
@inject IAccessTokenProvider TokenProvider
@inject NavigationManager Navigation
@inject NavigationStateService NavState
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime

<PageTitle>bussin</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="container-fluid p-4">
            @if (!hasArmPermission && !isGrantingArmConsent)
            {
                <div class="alert alert-warning">
                    <h5><i class="bi bi-exclamation-triangle"></i> Permission Required</h5>
                    <p class="mb-3">
                        <strong>To see your Service Bus namespaces here, you need to grant Azure Management API permission.</strong>
                        This allows bussin to read and list your Service Bus namespaces across your Azure subscriptions.
                    </p>
                    <p class="mb-3">
                        <strong>What we use it for:</strong>
                    </p>
                    <ul class="mb-3">
                        <li>List all Service Bus namespaces in your tenant</li>
                        <li>Read queue/topic/subscription metadata (message counts, status, etc.)</li>
                        <li>Nothing else - we never create, modify, or delete any Azure resources</li>
                    </ul>
                    @if (!string.IsNullOrEmpty(consentErrorMessage))
                    {
                        <div class="alert alert-danger mb-3">
                            @consentErrorMessage
                        </div>
                    }
                    <button class="btn btn-warning" @onclick="GrantArmConsent" disabled="@isGrantingArmConsent">
                        <i class="bi bi-check-circle"></i> Grant Azure Management API Permission
                    </button>
                </div>
            }
            else if (isGrantingArmConsent)
            {
                <div class="alert alert-info">
                    <div class="d-flex align-items-center gap-2">
                        <div class="spinner-border spinner-border-sm" role="status"></div>
                        <span>Opening consent popup...</span>
                    </div>
                </div>
            }
            

            @if (hasArmPermission)
            {
                <div class="row justify-content-center mb-4">
                    <div class="col-lg-6">
                        <div class="position-relative">
                            <input type="text" class="form-control form-control-lg text-center" placeholder="Search namespaces..." 
                                   @bind="searchTerm" @bind:event="oninput" />
                            @if (isRefreshing)
                            {
                                <div class="position-absolute top-50 end-0 translate-middle-y me-3">
                                    <div class="spinner-border spinner-border-sm text-muted" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                @if (isRefreshing && namespaces.Count == 0)
                {
                    <div class="text-center mb-3">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (namespaces.Count > 0)
                {
                    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-3">
                        @foreach (var ns in FilteredNamespaces)
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card h-100 namespace-card" style="cursor: pointer;">
                                    <button class="favorite-btn @(NavState.IsFavorite(ns.FullyQualifiedNamespace) ? "favorited" : "not-favorited")" 
                                            @onclick="async () => await ToggleFavorite(ns.FullyQualifiedNamespace)" 
                                            @onclick:stopPropagation="true"
                                            title="@(NavState.IsFavorite(ns.FullyQualifiedNamespace) ? "Remove from favorites" : "Add to favorites")">
                                        @(NavState.IsFavorite(ns.FullyQualifiedNamespace) ? "â˜…" : "â˜†")
                                    </button>
                                    <div class="card-body" @onclick="() => NavigateToExplorer(ns)">
                                        <h5 class="card-title">@ns.Name</h5>
                                        <p class="card-text">
                                            <small class="text-muted">
                                                <strong>Subscription:</strong> @ns.SubscriptionName<br />
                                                <strong>Resource Group:</strong> @ns.ResourceGroup<br />
                                                <strong>Location:</strong> @ns.Location<br />
                                                <strong>Tenant:</strong> @ns.TenantId
                                            </small>
                                        </p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">
                    <strong>Error:</strong> @errorMessage
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container mt-5">
            <div class="row justify-content-center">
                <div class="col-md-8">
                    <div class="jumbotron">
                        <h1 class="display-4">Welcome to bussin</h1>
                        <p class="lead">A zero-backend tool for exploring and managing Azure Service Bus.</p>
                        <hr class="my-4">
                        <p>Sign in with your Azure account to get started.</p>
                        <a class="btn btn-primary btn-lg" href="authentication/login" role="button">Sign In</a>
                        
                        <div class="mt-4">
                            <div class="card">
                                <div class="card-header" style="cursor: pointer;" @onclick="ToggleSecurityInfo">
                                    <span class="me-2">ðŸ”’</span> 
                                    <strong>About Permissions & Security</strong>
                                    <span class="float-end">@(showSecurityInfo ? "â–¼" : "â–¶")</span>
                                </div>
                                @if (showSecurityInfo)
                                {
                                    <div class="card-body">
                                        <h5>What permissions are requested?</h5>
                                        <p>This application uses a privacy-first approach with minimal required permissions:</p>
                                        <div class="mb-3">
                                            <strong>1. Azure Service Bus API</strong> (required at initial sign-in)
                                            <ul>
                                                <li>Send and receive messages from queues, topics, and subscriptions</li>
                                                <li>Perform message operations (peek, delete, purge, etc.)</li>
                                                <li>List queues and topics within a namespace you provide</li>
                                            </ul>
                                        </div>
                                        <div class="mb-3">
                                            <strong>2. Azure Management API</strong> (optional - requested after sign-in)
                                            <ul>
                                                <li>Automatically browse and list your Service Bus namespaces</li>
                                                <li><strong>You can skip this</strong> and add namespaces manually instead</li>
                                            </ul>
                                        </div>
                                        <p class="text-muted small">
                                            <strong>Why this approach?</strong> The Management API permission can feel intrusive since it allows listing all your Azure resources. 
                                            We made it optional so you can use the app with just the Service Bus permission and manually add namespaces.
                                        </p>
                                        
                                        <h5 class="mt-3">Is this safe?</h5>
                                        <p>Yes! This application is completely safe:</p>
                                        <ul>
                                            <li><strong>Zero backend</strong> - All operations run directly in your browser</li>
                                            <li><strong>Your credentials never leave your device</strong> - Authentication is handled by Microsoft's secure login</li>
                                            <li><strong>No data storage</strong> - Nothing is saved to any server</li>
                                            <li><strong>Open source</strong> - You can review the code yourself</li>
                                            <li><strong>Uses your existing permissions</strong> - You can only access resources you already have access to</li>
                                        </ul>
                                        
                                        <h5 class="mt-3">Can I revoke access?</h5>
                                        <p>Yes, you can revoke these permissions at any time through your <a href="https://myapplications.microsoft.com/" target="_blank">Microsoft account settings</a>.</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

<BuildInfo />

@code {
    private Dictionary<string, ServiceBusNamespaceInfo> namespaceDict = new();
    private List<ServiceBusNamespaceInfo> namespaces => namespaceDict.Values.OrderBy(ns => ns.Name).ToList();
    private bool isRefreshing = false;
    private string? errorMessage;
    private bool showSecurityInfo = false;
    private string searchTerm = "";
    private CancellationTokenSource? _loadCts;
    private bool hasArmPermission = false;
    private bool isGrantingArmConsent = false;
    private string? consentErrorMessage = null;

    private IEnumerable<ServiceBusNamespaceInfo> FilteredNamespaces => 
        string.IsNullOrWhiteSpace(searchTerm) 
            ? namespaces 
            : namespaces.Where(ns => 
                ns.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (ns.SubscriptionName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                ns.ResourceGroup.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private void ToggleSecurityInfo()
    {
        showSecurityInfo = !showSecurityInfo;
    }

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            await NavState.InitializeAsync();
            await CheckArmPermission();
            if (hasArmPermission)
            {
                _ = LoadNamespacesAsync();
            }
        }
    }

    private async Task CheckArmPermission()
    {
        try
        {
            var result = await TokenProvider.RequestAccessToken(new AccessTokenRequestOptions
            {
                Scopes = ["https://management.azure.com/user_impersonation"]
            });

            hasArmPermission = result.Status != AccessTokenResultStatus.RequiresRedirect;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking ARM permission: {ex.Message}");
            hasArmPermission = false;
        }
    }

    private async Task GrantArmConsent()
    {
        isGrantingArmConsent = true;
        consentErrorMessage = null;
        StateHasChanged();

        try
        {
            var clientId = Configuration["AzureAd:ClientId"];
            var authority = Configuration["AzureAd:Authority"];
            
            await JSRuntime.InvokeVoidAsync("eval", $@"
                window.msalConfig = {{
                    clientId: '{clientId}',
                    authority: '{authority}'
                }};
            ");

            var result = await JSRuntime.InvokeAsync<JsonElement>("msalHelper.acquireTokenPopup", 
                "https://management.azure.com/user_impersonation");

            if (result.TryGetProperty("success", out var success) && success.GetBoolean())
            {
                Console.WriteLine("âœ“ ARM consent granted successfully - reloading page to refresh tokens");
                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
                return;
            }
            else if (result.TryGetProperty("error", out var error))
            {
                var errorMsg = error.GetString() ?? "Unknown error";
                if (!errorMsg.Contains("user_cancelled"))
                {
                    consentErrorMessage = errorMsg;
                    Console.WriteLine($"âœ— Consent failed: {consentErrorMessage}");
                }
                else
                {
                    Console.WriteLine("Consent cancelled by user");
                }
            }
        }
        catch (Exception ex)
        {
            consentErrorMessage = ex.Message;
            Console.WriteLine($"âœ— Error during consent: {ex}");
        }
        finally
        {
            isGrantingArmConsent = false;
            StateHasChanged();
        }
    }

    private async Task LoadNamespacesAsync()
    {
        _loadCts?.Cancel();
        _loadCts = new CancellationTokenSource();
        var ct = _loadCts.Token;

        isRefreshing = true;
        errorMessage = null;

        try
        {
            var credential = await AuthService.GetTokenCredentialAsync();
            if (credential == null)
            {
                errorMessage = "Failed to get authentication token";
                isRefreshing = false;
                return;
            }

            await foreach (var ns in ResourceService.ListServiceBusNamespacesAsync(credential, ct))
            {
                if (ct.IsCancellationRequested) break;
                namespaceDict[ns.Name] = ns;
                StateHasChanged();
            }
            
        }
        catch (OperationCanceledException) { }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load namespaces: {ex.Message}";
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }

    private void NavigateToExplorer(ServiceBusNamespaceInfo ns)
    {
        var url = $"explorer?namespace={Uri.EscapeDataString(ns.FullyQualifiedNamespace)}&rg={Uri.EscapeDataString(ns.ResourceGroup)}&sub={Uri.EscapeDataString(ns.SubscriptionId)}&name={Uri.EscapeDataString(ns.Name)}";
        Navigation.NavigateTo(url);
    }

    private async Task ToggleFavorite(string fullyQualifiedNamespace)
    {
        var ns = namespaces.FirstOrDefault(n => n.FullyQualifiedNamespace == fullyQualifiedNamespace);
        if (ns == null) return;

        if (NavState.IsFavorite(fullyQualifiedNamespace))
        {
            await NavState.RemoveFromFavoritesAsync(fullyQualifiedNamespace);
        }
        else
        {
            var displayName = ns.Name.Replace(".servicebus.windows.net", "");
            await NavState.AddToFavoritesAsync(fullyQualifiedNamespace, ns.ResourceGroup, ns.SubscriptionId, displayName);
        }
    }

}
