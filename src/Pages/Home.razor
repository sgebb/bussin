@page "/"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop
@using System.Text.Json
@inject IAuthenticationService AuthService
@inject IAzureResourceService ResourceService
@inject IAccessTokenProvider TokenProvider
@inject NavigationManager Navigation
@inject NavigationStateService NavState
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime

<PageTitle>bussin</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="container-fluid mt-4">
            <h1>bussin</h1>
            <p class="lead mb-3">A zero-backend PWA for managing Azure Service Busâ€”peek messages, purge queues, monitor metrics, and more. All processing happens in your browser, with no data sent to external servers.</p>

            @if (needsServiceBusConsent && !isGrantingConsent)
            {
                <div class="alert alert-warning">
                    <h5><i class="bi bi-shield-lock"></i> One More Permission Needed</h5>
                    <p class="mb-3">
                        You can see your Service Bus namespaces below, but to actually <strong>send and receive messages</strong>, 
                        you need to grant one more permission.
                    </p>
                    <div class="card mb-3">
                        <div class="card-body">
                            <h6 class="card-title">What you're granting now:</h6>
                            <ul class="mb-0">
                                <li><strong>Azure Service Bus API</strong> - Send and receive messages from queues, topics, and subscriptions</li>
                            </ul>
                        </div>
                    </div>
                    <div class="card mb-3 bg-light">
                        <div class="card-body">
                            <h6 class="card-title">What you already granted:</h6>
                            <ul class="mb-0">
                                <li><strong>Azure Management API</strong> - Browse and list your Service Bus resources (this is why you can see namespaces)</li>
                            </ul>
                        </div>
                    </div>
                    <p class="text-muted small mb-3">
                        <strong>Why two separate permissions?</strong> Azure AD requires separate consent for different services. 
                        Management API lets you browse resources, while Service Bus API lets you send/receive messages.
                    </p>
                    @if (!string.IsNullOrEmpty(consentErrorMessage))
                    {
                        <div class="alert alert-danger mb-3">
                            @consentErrorMessage
                        </div>
                    }
                    <button class="btn btn-warning btn-lg" @onclick="GrantConsent" disabled="@isGrantingConsent">
                        <i class="bi bi-check-circle"></i> Grant Service Bus Permission
                    </button>
                </div>
            }
            else if (isGrantingConsent)
            {
                <div class="alert alert-info">
                    <div class="d-flex align-items-center gap-2">
                        <div class="spinner-border spinner-border-sm" role="status"></div>
                        <span>Opening consent popup...</span>
                    </div>
                </div>
            }
            else
            {
                @if (isRefreshing)
                {
                    <div class="d-flex align-items-center gap-2 mb-3">
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Refreshing...</span>
                        </div>
                        <small class="text-muted">Refreshing...</small>
                    </div>
                }

                @if (namespaces.Count == 0)
                {
                    @if (!isRefreshing)
                    {
                        <div class="alert alert-info">
                            <h5>No Service Bus namespaces found</h5>
                            <p>You don't have access to any Service Bus namespaces, or none exist in your subscriptions.</p>
                            <p>Make sure you have the appropriate permissions to view Service Bus resources.</p>
                        </div>
                    }
                }
                else
                {
                    <div class="mb-3">
                        <input type="text" class="form-control" placeholder="Search namespaces..." 
                               @bind="searchTerm" @bind:event="oninput" />
                    </div>

                    <div class="row">
                        @foreach (var ns in FilteredNamespaces)
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card h-100 namespace-card" @onclick="() => NavigateToExplorer(ns)" style="cursor: pointer;">
                                    <div class="card-body">
                                        <h5 class="card-title">@ns.Name</h5>
                                        <p class="card-text">
                                            <small class="text-muted">
                                                <strong>Subscription:</strong> @ns.SubscriptionName<br />
                                                <strong>Resource Group:</strong> @ns.ResourceGroup<br />
                                                <strong>Location:</strong> @ns.Location<br />
                                                <strong>Tenant:</strong> @ns.TenantId
                                            </small>
                                        </p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">
                    <strong>Error:</strong> @errorMessage
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container mt-5">
            <div class="row justify-content-center">
                <div class="col-md-8">
                    <div class="jumbotron">
                        <h1 class="display-4">Welcome to bussin</h1>
                        <p class="lead">A zero-backend tool for exploring and managing Azure Service Bus.</p>
                        <hr class="my-4">
                        <p>Sign in with your Azure account to get started.</p>
                        <a class="btn btn-primary btn-lg" href="authentication/login" role="button">Sign In</a>
                        
                        <div class="mt-4">
                            <div class="card">
                                <div class="card-header" style="cursor: pointer;" @onclick="ToggleSecurityInfo">
                                    <span class="me-2">ðŸ”’</span> 
                                    <strong>About Permissions & Security</strong>
                                    <span class="float-end">@(showSecurityInfo ? "â–¼" : "â–¶")</span>
                                </div>
                                @if (showSecurityInfo)
                                {
                                    <div class="card-body">
                                        <h5>What permissions are requested?</h5>
                                        <p>This application requires two separate Azure permissions:</p>
                                        <div class="mb-3">
                                            <strong>1. Azure Management API</strong> (requested at initial sign-in)
                                            <ul>
                                                <li>Browse and list your Service Bus namespaces, queues, topics, and subscriptions</li>
                                            </ul>
                                        </div>
                                        <div class="mb-3">
                                            <strong>2. Azure Service Bus API</strong> (requested via popup after sign-in)
                                            <ul>
                                                <li>Send and receive messages from queues, topics, and subscriptions</li>
                                                <li>Perform message operations (peek, delete, purge, etc.)</li>
                                            </ul>
                                        </div>
                                        <p class="text-muted small">
                                            <strong>Why two permissions?</strong> Azure AD requires separate consent for different services. 
                                            You'll be asked to consent to each one separately.
                                        </p>
                                        
                                        <h5 class="mt-3">Is this safe?</h5>
                                        <p>Yes! This application is completely safe:</p>
                                        <ul>
                                            <li><strong>Zero backend</strong> - All operations run directly in your browser</li>
                                            <li><strong>Your credentials never leave your device</strong> - Authentication is handled by Microsoft's secure login</li>
                                            <li><strong>No data storage</strong> - Nothing is saved to any server</li>
                                            <li><strong>Open source</strong> - You can review the code yourself</li>
                                            <li><strong>Uses your existing permissions</strong> - You can only access resources you already have access to</li>
                                        </ul>
                                        
                                        <h5 class="mt-3">Can I revoke access?</h5>
                                        <p>Yes, you can revoke these permissions at any time through your <a href="https://myapplications.microsoft.com/" target="_blank">Microsoft account settings</a>.</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

<BuildInfo />

@code {
    private Dictionary<string, ServiceBusNamespaceInfo> namespaceDict = new();
    private List<ServiceBusNamespaceInfo> namespaces => namespaceDict.Values.ToList();
    private bool isRefreshing = false;
    private string? errorMessage;
    private bool showSecurityInfo = false;
    private string searchTerm = "";
    private CancellationTokenSource? _loadCts;
    private bool needsServiceBusConsent = false;
    private bool isGrantingConsent = false;
    private string? consentErrorMessage = null;

    private IEnumerable<ServiceBusNamespaceInfo> FilteredNamespaces => 
        string.IsNullOrWhiteSpace(searchTerm) 
            ? namespaces 
            : namespaces.Where(ns => 
                ns.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (ns.SubscriptionName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                ns.ResourceGroup.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private void ToggleSecurityInfo()
    {
        showSecurityInfo = !showSecurityInfo;
    }

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            await CheckServiceBusConsent();
            _ = LoadNamespacesAsync();
        }
    }

    private async Task CheckServiceBusConsent()
    {
        try
        {
            var result = await TokenProvider.RequestAccessToken(new AccessTokenRequestOptions
            {
                Scopes = ["https://servicebus.azure.net/user_impersonation"]
            });

            needsServiceBusConsent = result.Status == AccessTokenResultStatus.RequiresRedirect;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking Service Bus consent: {ex.Message}");
        }
    }

    private async Task GrantConsent()
    {
        isGrantingConsent = true;
        consentErrorMessage = null;
        StateHasChanged();

        try
        {
            var clientId = Configuration["AzureAd:ClientId"];
            var authority = Configuration["AzureAd:Authority"];
            
            await JSRuntime.InvokeVoidAsync("eval", $@"
                window.msalConfig = {{
                    clientId: '{clientId}',
                    authority: '{authority}'
                }};
            ");

            var result = await JSRuntime.InvokeAsync<JsonElement>("msalHelper.acquireTokenPopup", 
                "https://servicebus.azure.net/user_impersonation");

            if (result.TryGetProperty("success", out var success) && success.GetBoolean())
            {
                Console.WriteLine("âœ“ Service Bus consent granted successfully - reloading page to refresh tokens");
                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
                return;
            }
            else if (result.TryGetProperty("error", out var error))
            {
                var errorMsg = error.GetString() ?? "Unknown error";
                if (!errorMsg.Contains("user_cancelled"))
                {
                    consentErrorMessage = errorMsg;
                    Console.WriteLine($"âœ— Consent failed: {consentErrorMessage}");
                }
                else
                {
                    Console.WriteLine("Consent cancelled by user");
                }
            }
        }
        catch (Exception ex)
        {
            consentErrorMessage = ex.Message;
            Console.WriteLine($"âœ— Error during consent: {ex}");
        }
        finally
        {
            isGrantingConsent = false;
            StateHasChanged();
        }
    }

    private async Task LoadNamespacesAsync()
    {
        _loadCts?.Cancel();
        _loadCts = new CancellationTokenSource();
        var ct = _loadCts.Token;

        isRefreshing = true;
        errorMessage = null;

        try
        {
            var credential = await AuthService.GetTokenCredentialAsync();
            if (credential == null)
            {
                errorMessage = "Failed to get authentication token";
                isRefreshing = false;
                return;
            }

            await foreach (var ns in ResourceService.ListServiceBusNamespacesAsync(credential, ct))
            {
                if (ct.IsCancellationRequested) break;
                namespaceDict[ns.Name] = ns;
                StateHasChanged();
            }
        }
        catch (OperationCanceledException) { }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load namespaces: {ex.Message}";
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }

    private void NavigateToExplorer(ServiceBusNamespaceInfo ns)
    {
        // Add to recent namespaces
        NavState.AddRecentNamespace(ns);
        
        var url = $"explorer?namespace={Uri.EscapeDataString(ns.FullyQualifiedNamespace)}&rg={Uri.EscapeDataString(ns.ResourceGroup)}&sub={Uri.EscapeDataString(ns.SubscriptionId)}&name={Uri.EscapeDataString(ns.Name)}";
        Navigation.NavigateTo(url);
    }
}
