@page "/diagnostics"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IAuthenticationService AuthService
@inject IJSRuntime JSRuntime

<PageTitle>Diagnostics</PageTitle>

<div class="container mt-4">
    <h2>Authentication Diagnostics</h2>
    
    <div class="card mt-3">
        <div class="card-header">
            <h5>Token Information</h5>
        </div>
        <div class="card-body">
            <button class="btn btn-primary" @onclick="CheckTokens">Check Tokens</button>
            
            @if (diagnosticInfo != null)
            {
                <div class="mt-3">
                    <h6>Management Token:</h6>
                    <pre class="bg-light p-2"><code>@diagnosticInfo.ManagementToken</code></pre>
                    
                    <h6 class="mt-3">Service Bus Token:</h6>
                    <pre class="bg-light p-2"><code>@diagnosticInfo.ServiceBusToken</code></pre>
                    
                    @if (!string.IsNullOrEmpty(diagnosticInfo.ServiceBusToken))
                    {
                        <div class="alert alert-success mt-3">
                            ✓ Service Bus token is available
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-danger mt-3">
                            ✗ Service Bus token is NOT available
                            <p class="mt-2">You need to sign out and sign in again to consent to the Service Bus scope.</p>
                            <a href="authentication/logout" class="btn btn-warning">Sign Out</a>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
    
    <div class="card mt-3">
        <div class="card-header">
            <h5>JavaScript API Check</h5>
        </div>
        <div class="card-body">
            <button class="btn btn-primary" @onclick="CheckJsApi">Check ServiceBusAPI</button>
            
            @if (jsApiStatus != null)
            {
                <div class="mt-3">
                    <pre class="bg-light p-2"><code>@jsApiStatus</code></pre>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private DiagnosticInfo? diagnosticInfo;
    private string? jsApiStatus;

    private async Task CheckTokens()
    {
        diagnosticInfo = new DiagnosticInfo();
        
        try
        {
            var mgmtCred = await AuthService.GetTokenCredentialAsync();
            if (mgmtCred != null)
            {
                var mgmtToken = await mgmtCred.GetTokenAsync(
                    new Azure.Core.TokenRequestContext(new[] { "https://management.azure.com/.default" }), 
                    default);
                diagnosticInfo.ManagementToken = $"Available (expires: {mgmtToken.ExpiresOn})";
            }
            else
            {
                diagnosticInfo.ManagementToken = "Not available";
            }
        }
        catch (Exception ex)
        {
            diagnosticInfo.ManagementToken = $"Error: {ex.Message}";
        }

        try
        {
            var sbToken = await AuthService.GetServiceBusTokenAsync();
            if (!string.IsNullOrEmpty(sbToken))
            {
                diagnosticInfo.ServiceBusToken = $"Available ({sbToken.Length} chars)\nFirst 50 chars: {sbToken.Substring(0, Math.Min(50, sbToken.Length))}...";
            }
            else
            {
                diagnosticInfo.ServiceBusToken = "Not available - requires consent";
            }
        }
        catch (Exception ex)
        {
            diagnosticInfo.ServiceBusToken = $"Error: {ex.Message}";
        }
    }

    private async Task CheckJsApi()
    {
        try
        {
            var hasApi = await JSRuntime.InvokeAsync<bool>("eval", "typeof window.ServiceBusAPI !== 'undefined'");
            
            if (hasApi)
            {
                var functions = await JSRuntime.InvokeAsync<string>("eval", 
                    "Object.keys(window.ServiceBusAPI).join(', ')");
                jsApiStatus = $"✓ window.ServiceBusAPI is available\n\nFunctions: {functions}";
            }
            else
            {
                jsApiStatus = "✗ window.ServiceBusAPI is NOT available\n\nCheck that servicebus-api.js is loaded in index.html";
            }
        }
        catch (Exception ex)
        {
            jsApiStatus = $"Error checking JS API: {ex.Message}";
        }
    }

    private class DiagnosticInfo
    {
        public string ManagementToken { get; set; } = "";
        public string ServiceBusToken { get; set; } = "";
    }
}
