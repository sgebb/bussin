@page "/explorer"
@using Microsoft.AspNetCore.Authorization
@using Azure.Core
@attribute [Authorize]
@inject IAuthenticationService AuthService
@inject IAzureResourceService ResourceService
@inject IServiceBusOperationsService OperationsService
@inject IServiceBusJsInteropService JsInterop
@inject IMessageParsingService MessageParsingService
@inject NavigationManager Navigation
@inject NavigationStateService NavState

<PageTitle>Explorer - bussin</PageTitle>

<div class="explorer-layout">
    <!-- Section 1: Compact Header -->
    <div class="explorer-header">
        <div class="d-flex justify-content-between align-items-start">
            <div class="flex-grow-1">
                <div class="d-flex align-items-center gap-2">
                    <h1 class="explorer-namespace-title mb-0">@displayName</h1>
                    @if (NavState.IsFavorite(NamespaceParam ?? ""))
                    {
                        <button class="btn btn-sm btn-link" @onclick="ToggleEditMode" title="Edit name">
                            <i class="bi bi-pencil"></i>
                        </button>
                    }
                    @if (isLoadingEntities)
                    {
                        <div class="spinner-border spinner-border-sm text-muted" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                </div>
                <small class="text-muted">@NamespaceParam</small>
            </div>
            @if (NavState.IsFavorite(NamespaceParam ?? ""))
            {
                <div class="d-flex align-items-center gap-2">
                    <button class="btn btn-warning btn-sm" @onclick="() => ToggleFavorite()" title="Remove from favorites">
                        <i class="bi bi-star-fill"></i>
                    </button>
                    <select class="form-select form-select-sm" style="width: auto;" value="@selectedFolderId" @onchange="OnFolderChanged">
                        @foreach (var folder in NavState.Folders)
                        {
                            <option value="@folder.Id">@folder.Name</option>
                        }
                    </select>
                </div>
            }
            else
            {
                <button class="btn btn-outline-warning btn-sm" @onclick="() => ToggleFavorite()" title="Add to favorites">
                    <i class="bi bi-star"></i>
                </button>
            }
        </div>
        @if (isEditingName)
        {
            <div class="mt-2">
                <div class="input-group input-group-sm" style="max-width: 400px;">
                    <input type="text" class="form-control" @bind="displayName" @bind:event="oninput" />
                    <button class="btn btn-success" @onclick="SaveRename" disabled="@string.IsNullOrWhiteSpace(displayName)">Save</button>
                    <button class="btn btn-secondary" @onclick="() => isEditingName = false">Cancel</button>
                </div>
            </div>
        }
    </div>

    <!-- Section 2: Compact Entity Selector (3 Columns) -->
    @if (queues.Count > 0 || topics.Count > 0)
    {
        <div class="explorer-entities">
            <div class="explorer-entities-grid-3col">
                <!-- Queues Column -->
                <div class="entity-column">
                    <div class="entity-column-header">
                        <i class="bi bi-list-ul"></i> Queues (@queues.Count)
                    </div>
                    <div class="entity-list-scroll">
                        @foreach (var queue in queues)
                        {
                            <div class="entity-item @(selectedQueueName == queue.Name ? "active" : "")" @onclick="() => SelectQueue(queue.Name)">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>@queue.Name</span>
                                    @if (queue.ActiveMessageCount > 0 || queue.DeadLetterMessageCount > 0)
                                    {
                                        <span class="badge bg-secondary">@queue.ActiveMessageCount / @queue.DeadLetterMessageCount</span>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Topics Column -->
                <div class="entity-column">
                    <div class="entity-column-header">
                        <i class="bi bi-broadcast"></i> Topics (@topics.Count)
                    </div>
                    <div class="entity-list-scroll">
                        @foreach (var topic in topics)
                        {
                            <div class="entity-item @(selectedTopicName == topic.Name ? "active" : "")" @onclick="() => SelectTopic(topic.Name)">
                                <div>@topic.Name</div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Subscriptions Column -->
                <div class="entity-column">
                    <div class="entity-column-header">
                        <i class="bi bi-envelope"></i> Subscriptions (@subscriptions.Count)
                    </div>
                    <div class="entity-list-scroll">
                        @if (isLoadingSubscriptions)
                        {
                            <div class="text-center p-2">
                                <div class="spinner-border spinner-border-sm"></div>
                            </div>
                        }
                        else if (selectedTopicName == null)
                        {
                            <div class="text-center p-3 text-muted small">
                                Select a topic
                            </div>
                        }
                        else
                        {
                            @foreach (var sub in subscriptions)
                            {
                                <div class="entity-item @(selectedSubscriptionName == sub.Name ? "active" : "")" @onclick="() => SelectSubscription(sub.Name)">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span>@sub.Name</span>
                                        @if (sub.ActiveMessageCount > 0 || sub.DeadLetterMessageCount > 0)
                                        {
                                            <span class="badge bg-secondary">@sub.ActiveMessageCount / @sub.DeadLetterMessageCount</span>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Section 3: Messages (Takes Majority of Space) -->
    <div class="explorer-messages">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-sm mb-2">
                <strong>Error:</strong> @errorMessage
            </div>
        }

        <div class="explorer-messages-header">
            <!-- Header removed - just the message list -->
        </div>

        <div class="explorer-messages-content">
            <div class="explorer-messages-list">
                @if (peekedMessages.Count > 0)
                {
                    <MessageList Messages="@peekedMessages"
                                IsDLQ="@isViewingDLQ"
                                IsProcessing="@isProcessingBatch"
                                OnMessageSelected="@ShowMessageDetail"
                                OnDeleteMessages="@DeleteMessages"
                                OnResubmitMessages="@ResubmitMessages"
                                OnMoveToDLQMessages="@MoveToDLQMessages" />
                }
                else if (selectedQueueName != null || selectedSubscriptionName != null)
                {
                    <div class="text-center text-muted p-4">
                        <p>No messages found</p>
                        <button class="btn btn-primary" @onclick="PeekMessages" disabled="@isPeeking">
                            <i class="bi bi-search"></i> Peek Messages
                        </button>
                    </div>
                }
                else
                {
                    <div class="text-center text-muted p-4">
                        <p>Select a queue or topic subscription to view messages</p>
                    </div>
                }
            </div>

            <div class="explorer-actions-sidebar">
                <!-- DLQ Toggle -->
                @if (selectedQueueName != null || selectedSubscriptionName != null)
                {
                    <div class="action-btn-group dlq-toggle-group">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="dlqSwitch" checked="@isViewingDLQ" @onchange="OnDLQToggleChanged">
                            <label class="form-check-label" for="dlqSwitch">Dead Letter Queue</label>
                        </div>
                    </div>
                }

                <!-- Permanent Actions -->
                <div class="action-btn-group">
                    <div class="action-btn-group-title">Actions</div>
                    <button class="btn btn-sm btn-primary w-100" @onclick="@(peekedMessages.Count > 0 ? PeekNext : PeekMessages)" disabled="@(isPeeking || (selectedQueueName == null && selectedSubscriptionName == null))">
                        <i class="bi bi-search"></i> @(peekedMessages.Count > 0 ? "Peek More" : "Peek")
                    </button>
                    <button class="btn btn-sm btn-success w-100" @onclick="ShowSendMessageModal" disabled="@(selectedQueueName == null && selectedTopicName == null)">
                        <i class="bi bi-envelope"></i> Send
                    </button>
                    <button class="btn btn-sm btn-info w-100" @onclick="ShowMonitorModal" disabled="@(selectedQueueName == null && selectedSubscriptionName == null)">
                        <i class="bi bi-graph-up"></i> Monitor
                    </button>
                </div>

                <!-- Contextual Actions -->
                @if (selectedQueueName != null || selectedSubscriptionName != null)
                {
                    <div class="action-btn-group">
                        <div class="action-btn-group-title">Dangerous</div>
                        <button class="btn btn-sm btn-danger w-100" @onclick="() => PurgeMessages()" disabled="@isPurging">
                            <i class="bi bi-trash"></i> Purge All
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modals -->
<SendMessageModal IsVisible="@showSendMessageModal"
                 IsSending="@isSending"
                 OnClose="@(() => showSendMessageModal = false)"
                 OnSend="@SendMessage"
                 OnSendScheduled="@SendScheduledMessage" />

<MessageDetailModal IsVisible="@showMessageDetailModal"
                   Message="@selectedMessage"
                   IsDLQ="@isViewingDLQ"
                   IsProcessing="@isProcessingBatch"
                   OnClose="@CloseMessageDetail"
                   OnDelete="@DeleteSingleMessage"
                   OnResubmit="@ResubmitSingleMessage"
                   OnMoveToDLQ="@MoveToDLQSingleMessage" />

<PeekLockModal IsVisible="@showPeekLockModal"
              IsProcessing="@isPeeking"
              InitialCount="@peekLockCount"
              InitialDuration="@peekLockDuration"
              OnClose="@(() => showPeekLockModal = false)"
              OnPeekLock="@PeekLockMessagesWithSettings" />

<MessageMonitorModal IsVisible="@showMonitorModal"
                    NamespaceName="@NamespaceNameOnly"
                    QueueName="@selectedQueueName"
                    TopicName="@selectedTopicName"
                    SubscriptionName="@selectedSubscriptionName"
                    OnClose="@(() => showMonitorModal = false)" />

<ReceiveAndLockModal IsVisible="@showReceiveAndLockModal"
                    OnClose="@(() => showReceiveAndLockModal = false)"
                    OnLockMessages="@LockMessagesForModal" />

<ConfirmModal IsVisible="@showConfirmModal"
             Title="@confirmModalTitle"
             Message="@confirmModalMessage"
             DetailMessage="@confirmModalDetail"
             ConfirmButtonText="@confirmModalButtonText"
             ConfirmButtonClass="@confirmModalButtonClass"
             IsProcessing="@isConfirmProcessing"
             OnConfirm="@OnConfirmModalConfirm"
             OnCancel="@OnConfirmModalCancel" />

@code {
    [SupplyParameterFromQuery(Name = "namespace")]
    public string? NamespaceParam { get; set; }
    
    [SupplyParameterFromQuery(Name = "rg")]
    public string? ResourceGroupParam { get; set; }
    
    [SupplyParameterFromQuery(Name = "sub")]
    public string? SubscriptionIdParam { get; set; }
    
    [SupplyParameterFromQuery(Name = "name")]
    public string? NameParam { get; set; }

    private ServiceBusNamespaceInfo? _currentNamespace;

    private Dictionary<string, ServiceBusQueueInfo> queueDict = new();
    private Dictionary<string, ServiceBusTopicInfo> topicDict = new();
    private Dictionary<string, ServiceBusSubscriptionInfo> subscriptionDict = new();
    
    private List<ServiceBusQueueInfo> queues => queueDict.Values.ToList();
    private List<ServiceBusTopicInfo> topics => topicDict.Values.ToList();
    private List<ServiceBusSubscriptionInfo> subscriptions => subscriptionDict.Values.ToList();
    
    private string? selectedQueueName;
    private string? selectedTopicName;
    private string? selectedSubscriptionName;
    
    private List<ServiceBusMessage> peekedMessages = new();
    private bool isLoadingEntities = false;
    private bool isLoadingSubscriptions = false;
    private bool isPeeking = false;
    private bool isPurging = false;
    private CancellationTokenSource? _loadCts;
    private bool isSending = false;
    private bool isViewingDLQ = false;
    private bool showSendMessageModal = false;
    private bool showMessageDetailModal = false;
    private bool showPeekLockModal = false;
    private bool showMonitorModal = false;
    private bool showReceiveAndLockModal = false;
    private bool isProcessingBatch = false;
    private bool showConfirmModal = false;
    private string confirmModalTitle = "";
    private string confirmModalMessage = "";
    private string? confirmModalDetail = null;
    private string confirmModalButtonText = "Confirm";
    private string confirmModalButtonClass = "btn-primary";
    private bool isConfirmProcessing = false;
    private Func<Task>? confirmModalAction = null;
    private ServiceBusMessage? selectedMessage = null;
    private int peekLockCount = 10;
    private int peekLockDuration = 30;
    private int peekCount = 10;
    private int peekFromSequence = 0;
    private string? errorMessage;
    private string displayName = "";
    private string? selectedFolderId = null;
    private bool isEditingName = false;
    
    // Extract just the namespace name (e.g., "snorre" from "snorre.servicebus.windows.net")
    private string NamespaceNameOnly => NamespaceParam?.Split('.').FirstOrDefault() ?? "";

    private string? _lastNamespace;

    protected override async Task OnParametersSetAsync()
    {
        // Only reload if the namespace actually changed
        if (!string.IsNullOrEmpty(NamespaceParam) && NamespaceParam != _lastNamespace)
        {
            _lastNamespace = NamespaceParam;
            
            _currentNamespace = new ServiceBusNamespaceInfo
            {
                Name = NameParam ?? "",
                FullyQualifiedNamespace = NamespaceParam ?? "",
                ResourceGroup = ResourceGroupParam ?? "",
                SubscriptionId = SubscriptionIdParam ?? ""
            };
            
            selectedQueueName = null;
            selectedTopicName = null;
            selectedSubscriptionName = null;
            peekedMessages.Clear();
            
            // Clear all entity dictionaries when switching namespaces
            queueDict.Clear();
            topicDict.Clear();
            subscriptionDict.Clear();
            
            // Initialize rename and folder selection
            if (!string.IsNullOrEmpty(NamespaceParam))
            {
                var connection = NavState.GetNamespaceConnection(NamespaceParam);
                if (connection != null)
                {
                    displayName = connection.DisplayName;
                    selectedFolderId = NavState.GetCurrentFolderId(NamespaceParam);
                }
                else
                {
                    displayName = NameParam ?? "";
                }
            }
            
            await LoadEntitiesAsync();
        }
    }

    private async Task SaveRename()
    {
        if (string.IsNullOrWhiteSpace(displayName) || string.IsNullOrEmpty(NamespaceParam)) return;
        
        await NavState.RenameNamespaceAsync(NamespaceParam, displayName.Trim());
        isEditingName = false;
    }

    private void ToggleEditMode()
    {
        isEditingName = !isEditingName;
    }

    private async Task ToggleFavorite()
    {
        if (string.IsNullOrEmpty(NamespaceParam)) return;

        if (NavState.IsFavorite(NamespaceParam))
        {
            await NavState.RemoveFromFavoritesAsync(NamespaceParam);
        }
        else
        {
            if (string.IsNullOrEmpty(ResourceGroupParam) || string.IsNullOrEmpty(SubscriptionIdParam))
            {
                errorMessage = "Cannot add to favorites: missing resource group or subscription information";
                return;
            }
            
            await NavState.AddToFavoritesAsync(NamespaceParam, ResourceGroupParam, SubscriptionIdParam, displayName);
        }
    }

    private async Task OnFolderChanged(ChangeEventArgs e)
    {
        if (e.Value == null || string.IsNullOrEmpty(NamespaceParam)) return;
        
        var targetFolderId = e.Value.ToString();
        if (string.IsNullOrEmpty(targetFolderId)) return;
        
        await NavState.MoveNamespaceToFolderAsync(NamespaceParam, targetFolderId);
    }

    private async Task LoadEntitiesAsync()
    {
        if (_currentNamespace == null) return;
        
        _loadCts?.Cancel();
        _loadCts = new CancellationTokenSource();

        isLoadingEntities = true;
        errorMessage = null;

        try
        {
            var credential = await AuthService.GetTokenCredentialAsync();
            if (credential == null)
            {
                errorMessage = "Failed to get authentication token";
                isLoadingEntities = false;
                return;
            }

            await Task.WhenAll(
                LoadQueuesAsync(credential, _currentNamespace),
                LoadTopicsAsync(credential, _currentNamespace)
            );
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load entities: {ex.Message}";
        }
        finally
        {
            isLoadingEntities = false;
            StateHasChanged();
        }
    }

    private async Task LoadQueuesAsync(TokenCredential credential, ServiceBusNamespaceInfo namespaceInfo)
    {
        var ct = _loadCts?.Token ?? CancellationToken.None;
        
        try
        {
            await foreach (var queue in ResourceService.ListQueuesAsync(credential, namespaceInfo, ct))
            {
                if (ct.IsCancellationRequested) break;
                queueDict[queue.Name] = queue;
                StateHasChanged();
            }
        }
        catch (OperationCanceledException) { }
    }

    private async Task LoadTopicsAsync(TokenCredential credential, ServiceBusNamespaceInfo namespaceInfo)
    {
        var ct = _loadCts?.Token ?? CancellationToken.None;
        
        try
        {
            await foreach (var topic in ResourceService.ListTopicsAsync(credential, namespaceInfo, ct))
            {
                if (ct.IsCancellationRequested) break;
                topicDict[topic.Name] = topic;
                StateHasChanged();
            }
        }
        catch (OperationCanceledException) { }
    }

    private void SelectQueue(string queueName)
    {
        selectedQueueName = queueName;
        selectedTopicName = null;
        selectedSubscriptionName = null;
        peekedMessages.Clear();
    }

    private async Task SelectTopic(string topicName)
    {
        selectedQueueName = null;
        selectedTopicName = topicName;
        selectedSubscriptionName = null;
        peekedMessages.Clear();
        subscriptionDict.Clear();
        
        await LoadSubscriptionsAsync(topicName);
    }

    private async Task LoadSubscriptionsAsync(string topicName)
    {
        if (_currentNamespace == null) return;
        
        // Show loading spinner since we just cleared subscriptions
        isLoadingSubscriptions = true;

        try
        {
            var credential = await AuthService.GetTokenCredentialAsync();
            if (credential == null)
            {
                isLoadingSubscriptions = false;
                return;
            }

            var ct = _loadCts?.Token ?? CancellationToken.None;
            var firstItem = true;
            await foreach (var sub in ResourceService.ListSubscriptionsAsync(credential, _currentNamespace, topicName, ct))
            {
                if (ct.IsCancellationRequested) break;
                subscriptionDict[sub.Name] = sub;
                
                if (firstItem)
                {
                    isLoadingSubscriptions = false;
                    firstItem = false;
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading subscriptions: {ex.Message}";
        }
        finally
        {
            isLoadingSubscriptions = false;
            StateHasChanged();
        }
    }

    private void SelectSubscription(string subName)
    {
        selectedSubscriptionName = subName;
        selectedQueueName = null;
        peekedMessages.Clear();
    }

    private async Task PeekMessages()
    {
        isPeeking = true;
        peekedMessages.Clear();
        errorMessage = null;

        try
        {
            var token = await AuthService.GetServiceBusTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Service Bus token not available";
                return;
            }

            if (selectedQueueName != null)
            {
                peekedMessages = await JsInterop.PeekQueueMessagesAsync(NamespaceNameOnly, selectedQueueName, token, peekCount, peekFromSequence, isViewingDLQ);
            }
            else if (selectedSubscriptionName != null && selectedTopicName != null)
            {
                peekedMessages = await JsInterop.PeekSubscriptionMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, token, peekCount, peekFromSequence, isViewingDLQ);
            }

            Console.WriteLine($"Peeked {peekedMessages.Count} messages from sequence {peekFromSequence}");
        }
        catch (Exception ex)
        {
            var errorMsg = ex.Message;
            if (errorMsg.Contains("WebSocket") || errorMsg.Contains("websocket"))
            {
                errorMessage = $"WebSocket connection failed. This could be due to: (1) Token expiration - try refreshing the page, (2) Browser security policies, or (3) Network issues. Error: {ex.Message}";
            }
            else
            {
                errorMessage = $"Failed to peek messages: {ex.Message}";
            }
            Console.WriteLine($"Peek error: {ex}");
        }
        finally
        {
            isPeeking = false;
        }
    }

    private async Task PeekNext()
    {
        // Check if we've hit the limit
        if (peekedMessages.Count >= 1000)
        {
            errorMessage = "Maximum of 1000 messages loaded. Use filters or start from a different sequence number.";
            return;
        }

        isPeeking = true;
        errorMessage = null;

        try
        {
            var token = await AuthService.GetServiceBusTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Service Bus token not available";
                return;
            }

            // Set fromSequence to the last message's sequence number + 1
            if (peekedMessages.Any())
            {
                var lastSeq = peekedMessages.Max(m => m.SequenceNumber ?? 0);
                peekFromSequence = (int)(lastSeq + 1);
            }

            List<ServiceBusMessage> newMessages;
            if (selectedQueueName != null)
            {
                newMessages = await JsInterop.PeekQueueMessagesAsync(NamespaceNameOnly, selectedQueueName, token, peekCount, peekFromSequence, isViewingDLQ);
            }
            else if (selectedSubscriptionName != null && selectedTopicName != null)
            {
                newMessages = await JsInterop.PeekSubscriptionMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, token, peekCount, peekFromSequence, isViewingDLQ);
            }
            else
            {
                return;
            }

            // Append new messages to existing list
            if (newMessages.Any())
            {
                peekedMessages.AddRange(newMessages);
                Console.WriteLine($"Loaded {newMessages.Count} more messages. Total: {peekedMessages.Count}");
            }
            else
            {
                errorMessage = "No more messages available.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to peek next messages: {ex.Message}";
            Console.WriteLine($"Peek next error: {ex}");
        }
        finally
        {
            isPeeking = false;
        }
    }

    private void PurgeMessages()
    {
        var entityName = selectedQueueName ?? $"{selectedTopicName}/{selectedSubscriptionName}";
        var dlqSuffix = isViewingDLQ ? " (Dead Letter Queue)" : "";
        
        ShowConfirmModal(
            title: "Confirm Purge",
            message: $"Are you sure you want to purge all messages from {entityName}{dlqSuffix}?",
            detail: "This action cannot be undone. All messages will be permanently deleted.",
            confirmText: "Purge All Messages",
            confirmClass: "btn-danger",
            onConfirm: ExecutePurgeMessages
        );
    }

    private async Task ExecutePurgeMessages()
    {
        isConfirmProcessing = true;
        errorMessage = null;

        try
        {
            int count = 0;
            if (selectedQueueName != null)
            {
                count = await OperationsService.PurgeQueueAsync(NamespaceNameOnly, selectedQueueName, isViewingDLQ);
            }
            else if (selectedSubscriptionName != null && selectedTopicName != null)
            {
                count = await OperationsService.PurgeSubscriptionAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, isViewingDLQ);
            }

            peekedMessages.Clear();
            Console.WriteLine($"Purged {count} messages");
            CloseConfirmModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to purge messages: {ex.Message}";
            Console.WriteLine($"Purge error: {ex}");
        }
        finally
        {
            isConfirmProcessing = false;
        }
    }

    private void ShowSendMessageModal()
    {
        showSendMessageModal = true;
    }

    private void ShowMonitorModal()
    {
        showMonitorModal = true;
    }

    private void ShowReceiveAndLockModal()
    {
        showReceiveAndLockModal = true;
    }

    // Lock-based operations for the modal
    private async Task<List<ServiceBusMessage>> LockMessagesForModal(int count, int timeoutSeconds, bool fromDeadLetter)
    {
        var token = await AuthService.GetServiceBusTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            throw new InvalidOperationException("Service Bus token not available");
        }

        if (selectedQueueName != null)
        {
            return await JsInterop.ReceiveAndLockQueueMessagesAsync(NamespaceNameOnly, selectedQueueName, token, timeoutSeconds, isViewingDLQ, count);
        }
        else if (selectedTopicName != null && selectedSubscriptionName != null)
        {
            return await JsInterop.ReceiveAndLockSubscriptionMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, token, timeoutSeconds, isViewingDLQ, count);
        }
        return new List<ServiceBusMessage>();
    }

    private async Task SendMessage((string body, string? properties) messageData)
    {
        isSending = true;
        errorMessage = null;

        try
        {
            // Use parsing service to handle all the JSON logic
            var (bodyToSend, propsDict, error) = MessageParsingService.ParseMessageForSending(messageData.body, messageData.properties);
            
            if (error != null)
            {
                errorMessage = error;
                return;
            }

            if (selectedQueueName != null)
            {
                await OperationsService.SendQueueMessageAsync(NamespaceNameOnly, selectedQueueName, bodyToSend, propsDict);
            }
            else if (selectedTopicName != null)
            {
                await OperationsService.SendTopicMessageAsync(NamespaceNameOnly, selectedTopicName, bodyToSend, propsDict);
            }

            showSendMessageModal = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to send message: {ex.Message}";
            Console.WriteLine($"Send error: {ex}");
        }
        finally
        {
            isSending = false;
        }
    }

    private async Task SendScheduledMessage((string body, string? properties, DateTime scheduledTime) messageData)
    {
        isSending = true;
        errorMessage = null;

        try
        {
            var (bodyToSend, propsDict, error) = MessageParsingService.ParseMessageForSending(messageData.body, messageData.properties);
            
            if (error != null)
            {
                errorMessage = error;
                return;
            }

            var token = await AuthService.GetServiceBusTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Service Bus token not available";
                return;
            }

            if (selectedQueueName != null)
            {
                await JsInterop.SendScheduledQueueMessageAsync(NamespaceNameOnly, selectedQueueName, token, bodyToSend, messageData.scheduledTime, propsDict);
            }
            else if (selectedTopicName != null)
            {
                await JsInterop.SendScheduledTopicMessageAsync(NamespaceNameOnly, selectedTopicName, token, bodyToSend, messageData.scheduledTime, propsDict);
            }

            showSendMessageModal = false;
            Console.WriteLine($"Scheduled message for {messageData.scheduledTime:u}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to send scheduled message: {ex.Message}";
            Console.WriteLine($"Send scheduled error: {ex}");
        }
        finally
        {
            isSending = false;
        }
    }

    private void OnDLQToggleChanged(ChangeEventArgs e)
    {
        isViewingDLQ = e.Value is bool b && b;
        peekedMessages.Clear();
    }

    private void ShowConfirmModal(string title, string message, string? detail, string confirmText, string confirmClass, Func<Task> onConfirm)
    {
        confirmModalTitle = title;
        confirmModalMessage = message;
        confirmModalDetail = detail;
        confirmModalButtonText = confirmText;
        confirmModalButtonClass = confirmClass;
        confirmModalAction = onConfirm;
        showConfirmModal = true;
    }

    private void CloseConfirmModal()
    {
        showConfirmModal = false;
        confirmModalAction = null;
        isConfirmProcessing = false;
    }

    private async Task OnConfirmModalConfirm()
    {
        if (confirmModalAction != null)
        {
            await confirmModalAction();
        }
    }

    private void OnConfirmModalCancel()
    {
        CloseConfirmModal();
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    // Peek Lock functionality
    private void ShowPeekLockModal()
    {
        showPeekLockModal = true;
    }

    private async Task PeekLockMessagesWithSettings((int count, int duration) settings)
    {
        showPeekLockModal = false;
        isPeeking = true;
        errorMessage = null;

        // Update the stored values
        peekLockCount = settings.count;
        peekLockDuration = settings.duration;

        try
        {
            // Peek lock is similar to peek but locks the messages
            // For now, we'll use the same peek functionality
            // In a real implementation, you'd want to use a different API that actually locks
            // with the specified count and duration
            Console.WriteLine($"Peek & Lock: {peekLockCount} messages for {peekLockDuration} seconds");
            await PeekMessages();
        }
        finally
        {
            isPeeking = false;
        }
    }

    // Message detail modal
    private void ShowMessageDetail(ServiceBusMessage message)
    {
        selectedMessage = message;
        showMessageDetailModal = true;
    }

    private void CloseMessageDetail()
    {
        showMessageDetailModal = false;
        selectedMessage = null;
    }

    // Batch operations
    private void DeleteMessages(List<long> sequenceNumbers)
    {
        ShowConfirmModal(
            title: "Confirm Delete",
            message: $"Are you sure you want to delete {sequenceNumbers.Count} message(s)?",
            detail: "This action cannot be undone.",
            confirmText: "Delete Messages",
            confirmClass: "btn-danger",
            onConfirm: async () => await ExecuteDeleteMessages(sequenceNumbers)
        );
    }

    private async Task ExecuteDeleteMessages(List<long> sequenceNumbers)
    {

        isConfirmProcessing = true;
        errorMessage = null;

        try
        {
            if (selectedQueueName != null)
            {
                await OperationsService.DeleteQueueMessagesAsync(NamespaceNameOnly, selectedQueueName, sequenceNumbers.ToArray(), isViewingDLQ);
            }
            else if (selectedTopicName != null && selectedSubscriptionName != null)
            {
                await OperationsService.DeleteSubscriptionMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, sequenceNumbers.ToArray(), isViewingDLQ);
            }
            
            // Remove deleted messages from the view
            peekedMessages.RemoveAll(m => m.SequenceNumber.HasValue && sequenceNumbers.Contains(m.SequenceNumber.Value));
            CloseConfirmModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete messages: {ex.Message}";
            Console.WriteLine($"Delete error details: {ex}");
        }
        finally
        {
            isConfirmProcessing = false;
        }
    }

    private void ResubmitMessages(List<long> sequenceNumbers)
    {
        ShowConfirmModal(
            title: "Confirm Resubmit",
            message: $"Resubmit {sequenceNumbers.Count} message(s) from Dead Letter Queue?",
            detail: "Messages will be sent back to the main queue/subscription.",
            confirmText: "Resubmit Messages",
            confirmClass: "btn-primary",
            onConfirm: async () => await ExecuteResubmitMessages(sequenceNumbers)
        );
    }

    private async Task ExecuteResubmitMessages(List<long> sequenceNumbers)
    {

        isConfirmProcessing = true;
        errorMessage = null;

        try
        {
            if (selectedQueueName != null)
            {
                await OperationsService.ResendQueueMessagesAsync(NamespaceNameOnly, selectedQueueName, sequenceNumbers.ToArray(), true);
            }
            else if (selectedTopicName != null && selectedSubscriptionName != null)
            {
                await OperationsService.ResendSubscriptionMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, sequenceNumbers.ToArray(), true);
            }
            
            // Remove resubmitted messages from the view
            peekedMessages.RemoveAll(m => m.SequenceNumber.HasValue && sequenceNumbers.Contains(m.SequenceNumber.Value));
            CloseConfirmModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to resubmit messages: {ex.Message}";
        }
        finally
        {
            isConfirmProcessing = false;
        }
    }

    private void MoveToDLQMessages(List<long> sequenceNumbers)
    {
        ShowConfirmModal(
            title: "Confirm Move to DLQ",
            message: $"Move {sequenceNumbers.Count} message(s) to Dead Letter Queue?",
            detail: "Messages will be moved to the DLQ and marked as dead-lettered.",
            confirmText: "Move to DLQ",
            confirmClass: "btn-warning",
            onConfirm: async () => await ExecuteMoveToDLQMessages(sequenceNumbers)
        );
    }

    private async Task ExecuteMoveToDLQMessages(List<long> sequenceNumbers)
    {

        isConfirmProcessing = true;
        errorMessage = null;

        try
        {
            if (selectedQueueName != null)
            {
                await OperationsService.MoveToDLQQueueMessagesAsync(NamespaceNameOnly, selectedQueueName, sequenceNumbers.ToArray());
            }
            else if (selectedTopicName != null && selectedSubscriptionName != null)
            {
                await OperationsService.MoveToDLQSubscriptionMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, sequenceNumbers.ToArray());
            }
            
            // Remove moved messages from the view
            peekedMessages.RemoveAll(m => m.SequenceNumber.HasValue && sequenceNumbers.Contains(m.SequenceNumber.Value));
            CloseConfirmModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to move messages to DLQ: {ex.Message}";
            Console.WriteLine($"Move to DLQ error details: {ex}");
        }
        finally
        {
            isConfirmProcessing = false;
        }
    }

    // Single message operations
    private void DeleteSingleMessage(long sequenceNumber)
    {
        CloseMessageDetail();
        DeleteMessages(new List<long> { sequenceNumber });
    }

    private void ResubmitSingleMessage(long sequenceNumber)
    {
        CloseMessageDetail();
        ResubmitMessages(new List<long> { sequenceNumber });
    }

    private void MoveToDLQSingleMessage(long sequenceNumber)
    {
        CloseMessageDetail();
        MoveToDLQMessages(new List<long> { sequenceNumber });
    }
}
