@page "/explorer"
@inject IAuthenticationService AuthService
@inject IAzureResourceService ResourceService
@inject IServiceBusOperationsService OperationsService
@inject IMessageParsingService MessageParsingService
@inject NavigationManager Navigation

<PageTitle>Explorer - Service Bus Explorer</PageTitle>

<div class="container-fluid mt-4">
    <div class="row mb-3">
        <div class="col-md-12">
            <h1 class="mb-1">@NameParam</h1>
            <p class="text-muted mb-0">
                <small>
                    <strong>Subscription:</strong> @SubscriptionIdParam<br />
                    <strong>Namespace:</strong> @NamespaceParam
                </small>
            </p>
        </div>
    </div>

    @if (isLoadingEntities)
    {
        <div class="row">
            <div class="col-md-12">
                <div class="spinner-border text-primary"></div>
                <span class="ms-2">Loading queues and topics...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <EntityListPanel Title="Queues"
                           Items="@queueNames"
                           SelectedItem="@selectedQueueName"
                           HeaderColorClass="bg-primary"
                           OnItemSelected="@SelectQueue" />

            <EntityListPanel Title="Topics"
                           Items="@topicNames"
                           SelectedItem="@selectedTopicName"
                           HeaderColorClass="bg-success"
                           OnItemSelected="@SelectTopic" />

            <EntityListPanel Title="Subscriptions"
                           Items="@subscriptionNames"
                           SelectedItem="@selectedSubscriptionName"
                           IsLoading="@isLoadingSubscriptions"
                           ShowEmptyMessage="@(selectedTopicName == null)"
                           EmptyMessage="Select a topic to view subscriptions"
                           HeaderColorClass="bg-info"
                           OnItemSelected="@SelectSubscription" />
        </div>

        <!-- Message Operations -->
        @if (selectedQueueName != null || selectedSubscriptionName != null)
        {
            <div class="row mt-4">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">@(selectedQueueName != null ? $"Queue: {selectedQueueName}" : $"Subscription: {selectedTopicName}/{selectedSubscriptionName}")</h5>
                        </div>
                        <div class="card-body">
                            <!-- Entity level buttons (always visible) -->
                            <div class="mb-3 pb-3 border-bottom">
                                <label class="text-muted small mb-2 d-block">@(selectedQueueName != null ? "QUEUE" : "TOPIC/SUBSCRIPTION") OPERATIONS</label>
                                <div class="d-flex gap-2 align-items-center">
                                    <button class="btn btn-success" @onclick="ShowSendMessageModal">
                                        <span class="me-1">ðŸ“¤</span> Send Message
                                    </button>
                                    <div class="form-check form-switch d-flex align-items-center ms-2">
                                        <input class="form-check-input" type="checkbox" id="dlqToggle" @bind="isViewingDLQ" @bind:after="OnDLQToggleChanged">
                                        <label class="form-check-label ms-2" for="dlqToggle">
                                            <strong>@(isViewingDLQ ? "Viewing DLQ" : "View DLQ")</strong>
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <!-- Message operations buttons -->
                            <div class="mb-3">
                                <label class="text-muted small mb-2 d-block">MESSAGE OPERATIONS</label>
                                <div class="btn-group" role="group">
                                    <button class="btn btn-outline-primary" @onclick="PeekMessages" disabled="@isPeeking">
                                        @if (isPeeking)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                        }
                                        Peek
                                    </button>
                                    <button class="btn btn-outline-info" @onclick="ShowPeekLockModal" disabled="@isPeeking">
                                        Peek & Lock
                                    </button>
                                    <button class="btn btn-outline-warning" @onclick="PurgeMessages" disabled="@isPurging">
                                        @if (isPurging)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                        }
                                        Purge
                                    </button>
                                </div>
                            </div>

                            @if (peekedMessages.Count > 0)
                            {
                                <div class="mt-3">
                                    <h6>Messages (@peekedMessages.Count)</h6>
                                    <MessageList Messages="@peekedMessages"
                                                IsDLQ="@isViewingDLQ"
                                                IsProcessing="@isProcessingBatch"
                                                OnMessageSelected="@ShowMessageDetail"
                                                OnDeleteMessages="@DeleteMessages"
                                                OnResubmitMessages="@ResubmitMessages"
                                                OnMoveToDLQMessages="@MoveToDLQMessages" />
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            <strong>Error:</strong> @errorMessage
        </div>
    }
</div>

<!-- Modals -->
<SendMessageModal IsVisible="@showSendMessageModal"
                 IsSending="@isSending"
                 OnClose="@(() => showSendMessageModal = false)"
                 OnSend="@SendMessage" />

<MessageDetailModal IsVisible="@showMessageDetailModal"
                   Message="@selectedMessage"
                   IsDLQ="@isViewingDLQ"
                   IsProcessing="@isProcessingBatch"
                   OnClose="@CloseMessageDetail"
                   OnDelete="@DeleteSingleMessage"
                   OnResubmit="@ResubmitSingleMessage"
                   OnMoveToDLQ="@MoveToDLQSingleMessage" />

<PeekLockModal IsVisible="@showPeekLockModal"
              IsProcessing="@isPeeking"
              InitialCount="@peekLockCount"
              InitialDuration="@peekLockDuration"
              OnClose="@(() => showPeekLockModal = false)"
              OnPeekLock="@PeekLockMessagesWithSettings" />

@code {
    [SupplyParameterFromQuery(Name = "namespace")]
    public string? NamespaceParam { get; set; }
    
    [SupplyParameterFromQuery(Name = "rg")]
    public string? ResourceGroupParam { get; set; }
    
    [SupplyParameterFromQuery(Name = "sub")]
    public string? SubscriptionIdParam { get; set; }
    
    [SupplyParameterFromQuery(Name = "name")]
    public string? NameParam { get; set; }

    private List<string> queueNames = new();
    private List<string> topicNames = new();
    private List<string> subscriptionNames = new();
    
    private string? selectedQueueName;
    private string? selectedTopicName;
    private string? selectedSubscriptionName;
    
    private List<ServiceBusMessage> peekedMessages = new();
    private bool isLoadingEntities = false;
    private bool isLoadingSubscriptions = false;
    private bool isPeeking = false;
    private bool isPurging = false;
    private bool isSending = false;
    private bool isViewingDLQ = false;
    private bool showSendMessageModal = false;
    private bool showMessageDetailModal = false;
    private bool showPeekLockModal = false;
    private bool isProcessingBatch = false;
    private ServiceBusMessage? selectedMessage = null;
    private int peekLockCount = 10;
    private int peekLockDuration = 30;
    private string? errorMessage;
    
    // Extract just the namespace name (e.g., "snorre" from "snorre.servicebus.windows.net")
    private string NamespaceNameOnly => NamespaceParam?.Split('.').FirstOrDefault() ?? "";

    private string? _lastNamespace;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(NamespaceParam))
        {
            _lastNamespace = NamespaceParam;
            await LoadEntitiesAsync();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // Only reload if the namespace actually changed
        if (!string.IsNullOrEmpty(NamespaceParam) && NamespaceParam != _lastNamespace)
        {
            _lastNamespace = NamespaceParam;
            
            // Clear previous state and reload
            selectedQueueName = null;
            selectedTopicName = null;
            selectedSubscriptionName = null;
            peekedMessages.Clear();
            queueNames.Clear();
            topicNames.Clear();
            subscriptionNames.Clear();
            
            await LoadEntitiesAsync();
        }
    }

    private async Task LoadEntitiesAsync()
    {
        isLoadingEntities = true;
        errorMessage = null;

        try
        {
            var credential = await AuthService.GetTokenCredentialAsync();
            if (credential == null)
            {
                errorMessage = "Failed to get authentication token";
                return;
            }

            var namespaceInfo = new ServiceBusNamespaceInfo
            {
                Name = NameParam ?? "",
                FullyQualifiedNamespace = NamespaceParam ?? "",
                ResourceGroup = ResourceGroupParam ?? "",
                SubscriptionId = SubscriptionIdParam ?? "",
                SubscriptionName = "",
                TenantId = "",
                Location = ""
            };

            queueNames = await ResourceService.ListQueuesAsync(credential, namespaceInfo);
            topicNames = await ResourceService.ListTopicsAsync(credential, namespaceInfo);

            Console.WriteLine($"Loaded {queueNames.Count} queues and {topicNames.Count} topics");
            
            // Force UI update after loading from cache or API
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load entities: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isLoadingEntities = false;
        }
    }

    private void SelectQueue(string queueName)
    {
        selectedQueueName = queueName;
        selectedTopicName = null;
        selectedSubscriptionName = null;
        peekedMessages.Clear();
    }

    private async Task SelectTopic(string topicName)
    {
        selectedQueueName = null;
        selectedTopicName = topicName;
        selectedSubscriptionName = null;
        peekedMessages.Clear();
        
        await LoadSubscriptionsAsync(topicName);
    }

    private async Task LoadSubscriptionsAsync(string topicName)
    {
        isLoadingSubscriptions = true;
        subscriptionNames.Clear();

        try
        {
            var credential = await AuthService.GetTokenCredentialAsync();
            if (credential == null) return;

            var namespaceInfo = new ServiceBusNamespaceInfo
            {
                Name = NameParam ?? "",
                FullyQualifiedNamespace = NamespaceParam ?? "",
                ResourceGroup = ResourceGroupParam ?? "",
                SubscriptionId = SubscriptionIdParam ?? "",
                SubscriptionName = "",
                TenantId = "",
                Location = ""
            };

            subscriptionNames = await ResourceService.ListSubscriptionsAsync(credential, namespaceInfo, topicName);
            Console.WriteLine($"Loaded {subscriptionNames.Count} subscriptions");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading subscriptions: {ex.Message}");
        }
        finally
        {
            isLoadingSubscriptions = false;
        }
    }

    private void SelectSubscription(string subName)
    {
        selectedSubscriptionName = subName;
        selectedQueueName = null;
        peekedMessages.Clear();
    }

    private async Task PeekMessages()
    {
        isPeeking = true;
        peekedMessages.Clear();
        errorMessage = null;

        try
        {
            if (isViewingDLQ)
            {
                if (selectedQueueName != null)
                {
                    peekedMessages = await OperationsService.PeekQueueDeadLetterMessagesAsync(NamespaceNameOnly, selectedQueueName, 10);
                }
                else if (selectedSubscriptionName != null && selectedTopicName != null)
                {
                    peekedMessages = await OperationsService.PeekSubscriptionDeadLetterMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, 10);
                }
            }
            else
            {
                if (selectedQueueName != null)
                {
                    peekedMessages = await OperationsService.PeekQueueMessagesAsync(NamespaceNameOnly, selectedQueueName, 10);
                }
                else if (selectedSubscriptionName != null && selectedTopicName != null)
                {
                    peekedMessages = await OperationsService.PeekSubscriptionMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, 10);
                }
            }

            Console.WriteLine($"Peeked {peekedMessages.Count} messages");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to peek messages: {ex.Message}";
            Console.WriteLine($"Peek error: {ex}");
        }
        finally
        {
            isPeeking = false;
        }
    }

    private async Task PurgeMessages()
    {
        if (!await ConfirmAction("Are you sure you want to purge all messages? This cannot be undone."))
            return;

        isPurging = true;
        errorMessage = null;

        try
        {
            int count = 0;
            if (selectedQueueName != null)
            {
                count = await OperationsService.PurgeQueueAsync(NamespaceNameOnly, selectedQueueName);
            }
            else if (selectedSubscriptionName != null && selectedTopicName != null)
            {
                count = await OperationsService.PurgeSubscriptionAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName);
            }

            peekedMessages.Clear();
            Console.WriteLine($"Purged {count} messages");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to purge messages: {ex.Message}";
            Console.WriteLine($"Purge error: {ex}");
        }
        finally
        {
            isPurging = false;
        }
    }

    private void ShowSendMessageModal()
    {
        showSendMessageModal = true;
    }

    private async Task SendMessage((string body, string? properties) messageData)
    {
        isSending = true;
        errorMessage = null;

        try
        {
            // Use parsing service to handle all the JSON logic
            var (bodyToSend, propsDict, error) = MessageParsingService.ParseMessageForSending(messageData.body, messageData.properties);
            
            if (error != null)
            {
                errorMessage = error;
                return;
            }

            if (selectedQueueName != null)
            {
                await OperationsService.SendQueueMessageAsync(NamespaceNameOnly, selectedQueueName, bodyToSend, propsDict);
            }
            else if (selectedTopicName != null)
            {
                await OperationsService.SendTopicMessageAsync(NamespaceNameOnly, selectedTopicName, bodyToSend, propsDict);
            }

            showSendMessageModal = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to send message: {ex.Message}";
            Console.WriteLine($"Send error: {ex}");
        }
        finally
        {
            isSending = false;
        }
    }

    private void OnDLQToggleChanged()
    {
        peekedMessages.Clear();
    }

    private async Task<bool> ConfirmAction(string message)
    {
        // Simple confirmation - in a real app you'd want a proper modal
        return await Task.FromResult(true); // For now, always confirm
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    // Peek Lock functionality
    private void ShowPeekLockModal()
    {
        showPeekLockModal = true;
    }

    private async Task PeekLockMessagesWithSettings((int count, int duration) settings)
    {
        showPeekLockModal = false;
        isPeeking = true;
        errorMessage = null;

        // Update the stored values
        peekLockCount = settings.count;
        peekLockDuration = settings.duration;

        try
        {
            // Peek lock is similar to peek but locks the messages
            // For now, we'll use the same peek functionality
            // In a real implementation, you'd want to use a different API that actually locks
            // with the specified count and duration
            Console.WriteLine($"Peek & Lock: {peekLockCount} messages for {peekLockDuration} seconds");
            await PeekMessages();
        }
        finally
        {
            isPeeking = false;
        }
    }

    // Message detail modal
    private void ShowMessageDetail(ServiceBusMessage message)
    {
        selectedMessage = message;
        showMessageDetailModal = true;
    }

    private void CloseMessageDetail()
    {
        showMessageDetailModal = false;
        selectedMessage = null;
    }

    // Batch operations
    private async Task DeleteMessages(List<long> sequenceNumbers)
    {
        if (!await ConfirmAction($"Delete {sequenceNumbers.Count} message(s)?"))
            return;

        isProcessingBatch = true;
        errorMessage = null;

        try
        {
            if (selectedQueueName != null)
            {
                await OperationsService.DeleteQueueMessagesAsync(NamespaceNameOnly, selectedQueueName, sequenceNumbers.ToArray());
                await PeekMessages(); // Refresh
            }
            else if (selectedTopicName != null && selectedSubscriptionName != null)
            {
                await OperationsService.DeleteSubscriptionMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, sequenceNumbers.ToArray());
                await PeekMessages(); // Refresh
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete messages: {ex.Message}";
            Console.WriteLine($"Delete error details: {ex}");
        }
        finally
        {
            isProcessingBatch = false;
        }
    }

    private async Task ResubmitMessages(List<long> sequenceNumbers)
    {
        if (!await ConfirmAction($"Resubmit {sequenceNumbers.Count} message(s) from DLQ?"))
            return;

        isProcessingBatch = true;
        errorMessage = null;

        try
        {
            if (selectedQueueName != null)
            {
                await OperationsService.ResubmitQueueDeadLetterMessagesAsync(NamespaceNameOnly, selectedQueueName, sequenceNumbers.ToArray());
                await PeekMessages(); // Refresh
            }
            else if (selectedTopicName != null && selectedSubscriptionName != null)
            {
                await OperationsService.ResubmitSubscriptionDeadLetterMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, sequenceNumbers.ToArray());
                await PeekMessages(); // Refresh
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to resubmit messages: {ex.Message}";
        }
        finally
        {
            isProcessingBatch = false;
        }
    }

    private async Task MoveToDLQMessages(List<long> sequenceNumbers)
    {
        if (!await ConfirmAction($"Move {sequenceNumbers.Count} message(s) to Dead Letter Queue?"))
            return;

        isProcessingBatch = true;
        errorMessage = null;

        try
        {
            if (selectedQueueName != null)
            {
                await OperationsService.MoveToDLQQueueMessagesAsync(NamespaceNameOnly, selectedQueueName, sequenceNumbers.ToArray());
                await PeekMessages(); // Refresh
            }
            else if (selectedTopicName != null && selectedSubscriptionName != null)
            {
                await OperationsService.MoveToDLQSubscriptionMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, sequenceNumbers.ToArray());
                await PeekMessages(); // Refresh
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to move messages to DLQ: {ex.Message}";
            Console.WriteLine($"Move to DLQ error details: {ex}");
        }
        finally
        {
            isProcessingBatch = false;
        }
    }

    // Single message operations
    private async Task DeleteSingleMessage(long sequenceNumber)
    {
        await DeleteMessages(new List<long> { sequenceNumber });
        CloseMessageDetail();
    }

    private async Task ResubmitSingleMessage(long sequenceNumber)
    {
        await ResubmitMessages(new List<long> { sequenceNumber });
        CloseMessageDetail();
    }

    private async Task MoveToDLQSingleMessage(long sequenceNumber)
    {
        await MoveToDLQMessages(new List<long> { sequenceNumber });
        CloseMessageDetail();
    }
}
