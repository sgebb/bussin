@page "/explorer"
@using Microsoft.AspNetCore.Authorization
@using Azure.Core
@attribute [Authorize]
@inject IAuthenticationService AuthService
@inject IAzureResourceService ResourceService
@inject IServiceBusOperationsService OperationsService
@inject IServiceBusJsInteropService JsInterop
@inject IMessageParsingService MessageParsingService
@inject NavigationManager Navigation

<PageTitle>Explorer - bussin</PageTitle>

<div class="explorer-container">
    <!-- Fixed Header Section -->
    <div class="explorer-header">
        <div class="container-fluid p-2">
            <div class="d-flex justify-content-between align-items-start mb-2">
                <div>
                    <h6 class="mb-0">@NameParam</h6>
                    <small class="text-muted">@NamespaceParam</small>
                </div>
            </div>

            @if (isLoadingEntities)
            {
                <div class="spinner-border spinner-border-sm text-primary"></div>
                <span class="ms-2 small">Loading...</span>
            }
            else
            {
                <div class="row g-2">
                    <!-- Left: Entity Selection -->
                    <div class="col-md-6">
                        <div class="row g-2">
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-header py-1 px-2 d-flex justify-content-between align-items-center">
                                        <small class="fw-bold">Queues (@queues.Count)</small>
                                        @if (isRefreshingQueues)
                                        {
                                            <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
                                        }
                                    </div>
                                    <div class="entity-list-scroll">
                                        <table class="table table-sm table-hover mb-0">
                                            <thead>
                                                <tr>
                                                    <th>Name</th>
                                                    <th>Active</th>
                                                    <th>DLQ</th>
                                                    <th>Scheduled</th>
                                                    <th>Status</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var queue in queues)
                                                {
                                                    <tr class="@(selectedQueueName == queue.Name ? "table-active" : "")" 
                                                        @onclick="() => SelectQueue(queue.Name)" 
                                                        style="cursor: pointer;">
                                                        <td><small>@queue.Name</small></td>
                                                        <td><small>@queue.ActiveMessageCount</small></td>
                                                        <td><small class="@(queue.DeadLetterMessageCount > 0 ? "text-danger fw-bold" : "")">@queue.DeadLetterMessageCount</small></td>
                                                        <td><small>@queue.ScheduledMessageCount</small></td>
                                                        <td><small>@queue.Status</small></td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-header py-1 px-2 d-flex justify-content-between align-items-center">
                                        <small class="fw-bold">Topics (@topics.Count)</small>
                                        @if (isRefreshingTopics)
                                        {
                                            <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
                                        }
                                    </div>
                                    <div class="entity-list-scroll">
                                        <table class="table table-sm table-hover mb-0">
                                            <thead>
                                                <tr>
                                                    <th>Name</th>
                                                    <th>Subs</th>
                                                    <th>Scheduled</th>
                                                    <th>Status</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var topic in topics)
                                                {
                                                    <tr class="@(selectedTopicName == topic.Name ? "table-active" : "")" 
                                                        @onclick="() => SelectTopic(topic.Name)" 
                                                        style="cursor: pointer;">
                                                        <td><small>@topic.Name</small></td>
                                                        <td><small>@topic.SubscriptionCount</small></td>
                                                        <td><small>@topic.ScheduledMessageCount</small></td>
                                                        <td><small>@topic.Status</small></td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-header py-1 px-2">
                                        <small class="fw-bold">Subscriptions (@subscriptions.Count)</small>
                                    </div>
                                    <div class="entity-list-scroll">
                                        @if (selectedTopicName == null)
                                        {
                                            <small class="text-muted p-2 d-block">Select a topic</small>
                                        }
                                        else if (isLoadingSubscriptions)
                                        {
                                            <div class="p-2"><div class="spinner-border spinner-border-sm"></div></div>
                                        }
                                        else
                                        {
                                            <table class="table table-sm table-hover mb-0">
                                                <thead>
                                                    <tr>
                                                        <th>Name</th>
                                                        <th>Active</th>
                                                        <th>DLQ</th>
                                                        <th>Status</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var sub in subscriptions)
                                                    {
                                                        <tr class="@(selectedSubscriptionName == sub.Name ? "table-active" : "")" 
                                                            @onclick="() => SelectSubscription(sub.Name)" 
                                                            style="cursor: pointer;">
                                                            <td><small>@sub.Name</small></td>
                                                            <td><small>@sub.ActiveMessageCount</small></td>
                                                            <td><small class="@(sub.DeadLetterMessageCount > 0 ? "text-danger fw-bold" : "")">@sub.DeadLetterMessageCount</small></td>
                                                            <td><small>@sub.Status</small></td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Right: Operations -->
                    <div class="col-md-6">
                        @if (selectedQueueName != null || selectedSubscriptionName != null)
                        {
                            <div class="card">
                                <div class="card-body p-2">
                                    <div class="mb-2">
                                        <small class="fw-bold">@(selectedQueueName != null ? $"Queue: {selectedQueueName}" : $"Topic: {selectedTopicName} / {selectedSubscriptionName}")</small>
                                    </div>
                                    <div class="d-flex gap-2 align-items-center mb-2">
                                        <button class="btn btn-success btn-sm" @onclick="ShowSendMessageModal">
                                            📤 Send
                                        </button>
                                        <div class="form-check form-switch mb-0">
                                            <input class="form-check-input" type="checkbox" id="dlqToggle" @bind="isViewingDLQ" @bind:after="OnDLQToggleChanged">
                                            <label class="form-check-label" for="dlqToggle">
                                                <small>@(isViewingDLQ ? "DLQ" : "View DLQ")</small>
                                            </label>
                                        </div>
                                    </div>

            <!-- Message operations buttons -->
            <div class="d-flex gap-2 mb-2">
                <button class="btn btn-primary btn-sm" @onclick="PeekMessages" disabled="@isPeeking">
                    @if (isPeeking)
                    {
                        <span class="spinner-border spinner-border-sm me-1"></span>
                    }
                    👁️ Peek
                </button>
                @if (!isViewingDLQ)
                {
                    <button class="btn btn-info btn-sm" @onclick="ShowMonitorModal">
                        📡 Monitor
                    </button>
                }
                <button class="btn btn-danger btn-sm" @onclick="PurgeMessages" disabled="@isPurging">
                    @if (isPurging)
                    {
                        <span class="spinner-border spinner-border-sm me-1"></span>
                    }
                    🗑️ Purge
                </button>
            </div>

            <!-- Peek Options Accordion -->
            <div class="card mb-2">
                <div class="card-header py-1 px-2" style="cursor: pointer;" @onclick="TogglePeekOptions">
                    <small>Peek Options</small>
                    <span class="float-end">@(showPeekOptions ? "▼" : "▶")</span>
                </div>
                @if (showPeekOptions)
                {
                    <div class="card-body p-2">
                        <div class="row g-2">
                            <div class="col-6">
                                <label class="form-label small mb-1">Count</label>
                                <input type="number" class="form-control form-control-sm" @bind="peekCount" min="1" max="100" />
                            </div>
                            <div class="col-6">
                                <label class="form-label small mb-1">From Sequence</label>
                                <input type="number" class="form-control form-control-sm" @bind="peekFromSequence" min="0" />
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Operation hints -->
            <div class="mt-1">
                <small class="text-muted">
                    @if (isViewingDLQ)
                    {
                        <span>💡 Select messages to Resubmit or Delete</span>
                    }
                    else
                    {
                        <span>💡 Select messages to Delete or Move to DLQ</span>
                    }
                </small>
            </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Scrollable Messages Section -->
    <div class="explorer-content">
        <div class="container-fluid">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    <strong>Error:</strong> @errorMessage
                </div>
            }

            @if (peekedMessages.Count > 0)
            {
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h6 class="mb-0">Messages (@peekedMessages.Count @(peekedMessages.Count >= 1000 ? "- Max Reached" : ""))</h6>
                    @if (peekedMessages.Count < 1000)
                    {
                        <button class="btn btn-sm btn-outline-secondary" @onclick="PeekNext" disabled="@isPeeking">
                            ⬇️ Load More
                        </button>
                    }
                </div>
                <MessageList Messages="@peekedMessages"
                            IsDLQ="@isViewingDLQ"
                            IsProcessing="@isProcessingBatch"
                            OnMessageSelected="@ShowMessageDetail"
                            OnDeleteMessages="@DeleteMessages"
                            OnResubmitMessages="@ResubmitMessages"
                            OnMoveToDLQMessages="@MoveToDLQMessages" />
            }
        </div>
    </div>
</div>

<!-- Modals -->
<SendMessageModal IsVisible="@showSendMessageModal"
                 IsSending="@isSending"
                 OnClose="@(() => showSendMessageModal = false)"
                 OnSend="@SendMessage"
                 OnSendScheduled="@SendScheduledMessage" />

<MessageDetailModal IsVisible="@showMessageDetailModal"
                   Message="@selectedMessage"
                   IsDLQ="@isViewingDLQ"
                   IsProcessing="@isProcessingBatch"
                   OnClose="@CloseMessageDetail"
                   OnDelete="@DeleteSingleMessage"
                   OnResubmit="@ResubmitSingleMessage"
                   OnMoveToDLQ="@MoveToDLQSingleMessage" />

<PeekLockModal IsVisible="@showPeekLockModal"
              IsProcessing="@isPeeking"
              InitialCount="@peekLockCount"
              InitialDuration="@peekLockDuration"
              OnClose="@(() => showPeekLockModal = false)"
              OnPeekLock="@PeekLockMessagesWithSettings" />

<MessageMonitorModal IsVisible="@showMonitorModal"
                    NamespaceName="@NamespaceNameOnly"
                    QueueName="@selectedQueueName"
                    TopicName="@selectedTopicName"
                    SubscriptionName="@selectedSubscriptionName"
                    OnClose="@(() => showMonitorModal = false)" />

<ReceiveAndLockModal IsVisible="@showReceiveAndLockModal"
                    OnClose="@(() => showReceiveAndLockModal = false)"
                    OnLockMessages="@LockMessagesForModal"
                    OnComplete="@CompleteLockedMessages"
                    OnAbandon="@AbandonLockedMessages"
                    OnDeadLetter="@DeadLetterLockedMessages" />

@code {
    [SupplyParameterFromQuery(Name = "namespace")]
    public string? NamespaceParam { get; set; }
    
    [SupplyParameterFromQuery(Name = "rg")]
    public string? ResourceGroupParam { get; set; }
    
    [SupplyParameterFromQuery(Name = "sub")]
    public string? SubscriptionIdParam { get; set; }
    
    [SupplyParameterFromQuery(Name = "name")]
    public string? NameParam { get; set; }

    private ServiceBusNamespaceInfo? _currentNamespace;

    private Dictionary<string, ServiceBusQueueInfo> queueDict = new();
    private Dictionary<string, ServiceBusTopicInfo> topicDict = new();
    private Dictionary<string, ServiceBusSubscriptionInfo> subscriptionDict = new();
    
    private List<ServiceBusQueueInfo> queues => queueDict.Values.ToList();
    private List<ServiceBusTopicInfo> topics => topicDict.Values.ToList();
    private List<ServiceBusSubscriptionInfo> subscriptions => subscriptionDict.Values.ToList();
    
    private string? selectedQueueName;
    private string? selectedTopicName;
    private string? selectedSubscriptionName;
    
    private List<ServiceBusMessage> peekedMessages = new();
    private bool isLoadingEntities = false;
    private bool isLoadingSubscriptions = false;
    private bool isRefreshingQueues = false;
    private bool isRefreshingTopics = false;
    private bool isPeeking = false;
    private bool isPurging = false;
    private CancellationTokenSource? _loadCts;
    private bool isSending = false;
    private bool isViewingDLQ = false;
    private bool showSendMessageModal = false;
    private bool showMessageDetailModal = false;
    private bool showPeekLockModal = false;
    private bool showMonitorModal = false;
    private bool showReceiveAndLockModal = false;
    private bool isProcessingBatch = false;
    private ServiceBusMessage? selectedMessage = null;
    private int peekLockCount = 10;
    private int peekLockDuration = 30;
    private int peekCount = 10;
    private int peekFromSequence = 0;
    private bool showPeekOptions = false;
    private string? errorMessage;
    
    // Extract just the namespace name (e.g., "snorre" from "snorre.servicebus.windows.net")
    private string NamespaceNameOnly => NamespaceParam?.Split('.').FirstOrDefault() ?? "";

    private string? _lastNamespace;

    private void TogglePeekOptions()
    {
        showPeekOptions = !showPeekOptions;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(NamespaceParam))
        {
            _lastNamespace = NamespaceParam;
            await LoadEntitiesAsync();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // Only reload if the namespace actually changed
        if (!string.IsNullOrEmpty(NamespaceParam) && NamespaceParam != _lastNamespace)
        {
            _lastNamespace = NamespaceParam;
            
            _currentNamespace = new ServiceBusNamespaceInfo
            {
                Name = NameParam ?? "",
                FullyQualifiedNamespace = NamespaceParam ?? "",
                ResourceGroup = ResourceGroupParam ?? "",
                SubscriptionId = SubscriptionIdParam ?? ""
            };
            
            selectedQueueName = null;
            selectedTopicName = null;
            selectedSubscriptionName = null;
            peekedMessages.Clear();
            queueDict.Clear();
            topicDict.Clear();
            subscriptionDict.Clear();
            
            await LoadEntitiesAsync();
        }
    }

    private async Task LoadEntitiesAsync()
    {
        if (_currentNamespace == null) return;
        
        _loadCts?.Cancel();
        _loadCts = new CancellationTokenSource();

        isLoadingEntities = true;
        errorMessage = null;
        queueDict = new();
        topicDict = new();

        try
        {
            var credential = await AuthService.GetTokenCredentialAsync();
            if (credential == null)
            {
                errorMessage = "Failed to get authentication token";
                return;
            }

            _ = LoadQueuesAsync(credential, _currentNamespace);
            _ = LoadTopicsAsync(credential, _currentNamespace);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load entities: {ex.Message}";
        }
        finally
        {
            isLoadingEntities = false;
            StateHasChanged();
        }
    }

    private async Task LoadQueuesAsync(TokenCredential credential, ServiceBusNamespaceInfo namespaceInfo)
    {
        var ct = _loadCts?.Token ?? CancellationToken.None;
        isRefreshingQueues = true;
        var firstItem = true;
        try
        {
            await foreach (var queue in ResourceService.ListQueuesAsync(credential, namespaceInfo, ct))
            {
                if (ct.IsCancellationRequested) break;
                queueDict[queue.Name] = queue;
                if (firstItem)
                {
                    isLoadingEntities = false;
                    firstItem = false;
                }
                StateHasChanged();
            }
        }
        catch (OperationCanceledException) { }
        finally
        {
            isRefreshingQueues = false;
            StateHasChanged();
        }
    }

    private async Task LoadTopicsAsync(TokenCredential credential, ServiceBusNamespaceInfo namespaceInfo)
    {
        var ct = _loadCts?.Token ?? CancellationToken.None;
        isRefreshingTopics = true;
        var firstItem = true;
        try
        {
            await foreach (var topic in ResourceService.ListTopicsAsync(credential, namespaceInfo, ct))
            {
                if (ct.IsCancellationRequested) break;
                topicDict[topic.Name] = topic;
                if (firstItem)
                {
                    isLoadingEntities = false;
                    firstItem = false;
                }
                StateHasChanged();
            }
        }
        catch (OperationCanceledException) { }
        finally
        {
            isRefreshingTopics = false;
            StateHasChanged();
        }
    }

    private void SelectQueue(string queueName)
    {
        selectedQueueName = queueName;
        selectedTopicName = null;
        selectedSubscriptionName = null;
        peekedMessages.Clear();
    }

    private async Task SelectTopic(string topicName)
    {
        selectedQueueName = null;
        selectedTopicName = topicName;
        selectedSubscriptionName = null;
        peekedMessages.Clear();
        
        await LoadSubscriptionsAsync(topicName);
    }

    private async Task LoadSubscriptionsAsync(string topicName)
    {
        if (_currentNamespace == null) return;
        
        isLoadingSubscriptions = true;
        subscriptionDict = new();

        try
        {
            var credential = await AuthService.GetTokenCredentialAsync();
            if (credential == null) return;

            var ct = _loadCts?.Token ?? CancellationToken.None;
            await foreach (var sub in ResourceService.ListSubscriptionsAsync(credential, _currentNamespace, topicName, ct))
            {
                if (ct.IsCancellationRequested) break;
                subscriptionDict[sub.Name] = sub;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading subscriptions: {ex.Message}";
        }
        finally
        {
            isLoadingSubscriptions = false;
            StateHasChanged();
        }
    }

    private void SelectSubscription(string subName)
    {
        selectedSubscriptionName = subName;
        selectedQueueName = null;
        peekedMessages.Clear();
    }

    private async Task PeekMessages()
    {
        isPeeking = true;
        peekedMessages.Clear();
        errorMessage = null;

        try
        {
            var token = await AuthService.GetServiceBusTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Service Bus token not available";
                return;
            }

            if (selectedQueueName != null)
            {
                peekedMessages = await JsInterop.PeekQueueMessagesAsync(NamespaceNameOnly, selectedQueueName, token, peekCount, peekFromSequence, isViewingDLQ);
            }
            else if (selectedSubscriptionName != null && selectedTopicName != null)
            {
                peekedMessages = await JsInterop.PeekSubscriptionMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, token, peekCount, peekFromSequence, isViewingDLQ);
            }

            Console.WriteLine($"Peeked {peekedMessages.Count} messages from sequence {peekFromSequence}");
        }
        catch (Exception ex)
        {
            var errorMsg = ex.Message;
            if (errorMsg.Contains("WebSocket") || errorMsg.Contains("websocket"))
            {
                errorMessage = $"WebSocket connection failed. This could be due to: (1) Token expiration - try refreshing the page, (2) Browser security policies, or (3) Network issues. Error: {ex.Message}";
            }
            else
            {
                errorMessage = $"Failed to peek messages: {ex.Message}";
            }
            Console.WriteLine($"Peek error: {ex}");
        }
        finally
        {
            isPeeking = false;
        }
    }

    private async Task PeekNext()
    {
        // Check if we've hit the limit
        if (peekedMessages.Count >= 1000)
        {
            errorMessage = "Maximum of 1000 messages loaded. Use filters or start from a different sequence number.";
            return;
        }

        isPeeking = true;
        errorMessage = null;

        try
        {
            var token = await AuthService.GetServiceBusTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Service Bus token not available";
                return;
            }

            // Set fromSequence to the last message's sequence number + 1
            if (peekedMessages.Any())
            {
                var lastSeq = peekedMessages.Max(m => m.SequenceNumber ?? 0);
                peekFromSequence = (int)(lastSeq + 1);
            }

            List<ServiceBusMessage> newMessages;
            if (selectedQueueName != null)
            {
                newMessages = await JsInterop.PeekQueueMessagesAsync(NamespaceNameOnly, selectedQueueName, token, peekCount, peekFromSequence, isViewingDLQ);
            }
            else if (selectedSubscriptionName != null && selectedTopicName != null)
            {
                newMessages = await JsInterop.PeekSubscriptionMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, token, peekCount, peekFromSequence, isViewingDLQ);
            }
            else
            {
                return;
            }

            // Append new messages to existing list
            if (newMessages.Any())
            {
                peekedMessages.AddRange(newMessages);
                Console.WriteLine($"Loaded {newMessages.Count} more messages. Total: {peekedMessages.Count}");
            }
            else
            {
                errorMessage = "No more messages available.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to peek next messages: {ex.Message}";
            Console.WriteLine($"Peek next error: {ex}");
        }
        finally
        {
            isPeeking = false;
        }
    }

    private async Task PurgeMessages()
    {
        if (!await ConfirmAction("Are you sure you want to purge all messages? This cannot be undone."))
            return;

        isPurging = true;
        errorMessage = null;

        try
        {
            int count = 0;
            if (selectedQueueName != null)
            {
                count = await OperationsService.PurgeQueueAsync(NamespaceNameOnly, selectedQueueName, isViewingDLQ);
            }
            else if (selectedSubscriptionName != null && selectedTopicName != null)
            {
                count = await OperationsService.PurgeSubscriptionAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, isViewingDLQ);
            }

            peekedMessages.Clear();
            Console.WriteLine($"Purged {count} messages");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to purge messages: {ex.Message}";
            Console.WriteLine($"Purge error: {ex}");
        }
        finally
        {
            isPurging = false;
        }
    }

    private void ShowSendMessageModal()
    {
        showSendMessageModal = true;
    }

    private void ShowMonitorModal()
    {
        showMonitorModal = true;
    }

    private void ShowReceiveAndLockModal()
    {
        showReceiveAndLockModal = true;
    }

    // Lock-based operations for the modal
    private async Task<List<ServiceBusMessage>> LockMessagesForModal(int count, int timeoutSeconds, bool fromDeadLetter)
    {
        var token = await AuthService.GetServiceBusTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            throw new InvalidOperationException("Service Bus token not available");
        }

        if (selectedQueueName != null)
        {
            return await JsInterop.ReceiveAndLockQueueMessagesAsync(NamespaceNameOnly, selectedQueueName, token, timeoutSeconds, isViewingDLQ, count);
        }
        else if (selectedTopicName != null && selectedSubscriptionName != null)
        {
            return await JsInterop.ReceiveAndLockSubscriptionMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, token, timeoutSeconds, isViewingDLQ, count);
        }
        return new List<ServiceBusMessage>();
    }

    private async Task CompleteLockedMessages(string[] lockTokens)
    {
        await OperationsService.CompleteMessagesAsync(lockTokens);
    }

    private async Task AbandonLockedMessages(string[] lockTokens)
    {
        await OperationsService.AbandonMessagesAsync(lockTokens);
    }

    private async Task DeadLetterLockedMessages(string[] lockTokens)
    {
        await OperationsService.DeadLetterMessagesAsync(lockTokens, new DeadLetterOptions 
        { 
            DeadLetterReason = "Manual dead letter from UI", 
            DeadLetterErrorDescription = "User initiated dead letter operation" 
        });
    }

    private async Task SendMessage((string body, string? properties) messageData)
    {
        isSending = true;
        errorMessage = null;

        try
        {
            // Use parsing service to handle all the JSON logic
            var (bodyToSend, propsDict, error) = MessageParsingService.ParseMessageForSending(messageData.body, messageData.properties);
            
            if (error != null)
            {
                errorMessage = error;
                return;
            }

            if (selectedQueueName != null)
            {
                await OperationsService.SendQueueMessageAsync(NamespaceNameOnly, selectedQueueName, bodyToSend, propsDict);
            }
            else if (selectedTopicName != null)
            {
                await OperationsService.SendTopicMessageAsync(NamespaceNameOnly, selectedTopicName, bodyToSend, propsDict);
            }

            showSendMessageModal = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to send message: {ex.Message}";
            Console.WriteLine($"Send error: {ex}");
        }
        finally
        {
            isSending = false;
        }
    }

    private async Task SendScheduledMessage((string body, string? properties, DateTime scheduledTime) messageData)
    {
        isSending = true;
        errorMessage = null;

        try
        {
            var (bodyToSend, propsDict, error) = MessageParsingService.ParseMessageForSending(messageData.body, messageData.properties);
            
            if (error != null)
            {
                errorMessage = error;
                return;
            }

            var token = await AuthService.GetServiceBusTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Service Bus token not available";
                return;
            }

            if (selectedQueueName != null)
            {
                await JsInterop.SendScheduledQueueMessageAsync(NamespaceNameOnly, selectedQueueName, token, bodyToSend, messageData.scheduledTime, propsDict);
            }
            else if (selectedTopicName != null)
            {
                await JsInterop.SendScheduledTopicMessageAsync(NamespaceNameOnly, selectedTopicName, token, bodyToSend, messageData.scheduledTime, propsDict);
            }

            showSendMessageModal = false;
            Console.WriteLine($"Scheduled message for {messageData.scheduledTime:u}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to send scheduled message: {ex.Message}";
            Console.WriteLine($"Send scheduled error: {ex}");
        }
        finally
        {
            isSending = false;
        }
    }

    private void OnDLQToggleChanged()
    {
        peekedMessages.Clear();
    }

    private async Task<bool> ConfirmAction(string message)
    {
        // Simple confirmation - in a real app you'd want a proper modal
        return await Task.FromResult(true); // For now, always confirm
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    // Peek Lock functionality
    private void ShowPeekLockModal()
    {
        showPeekLockModal = true;
    }

    private async Task PeekLockMessagesWithSettings((int count, int duration) settings)
    {
        showPeekLockModal = false;
        isPeeking = true;
        errorMessage = null;

        // Update the stored values
        peekLockCount = settings.count;
        peekLockDuration = settings.duration;

        try
        {
            // Peek lock is similar to peek but locks the messages
            // For now, we'll use the same peek functionality
            // In a real implementation, you'd want to use a different API that actually locks
            // with the specified count and duration
            Console.WriteLine($"Peek & Lock: {peekLockCount} messages for {peekLockDuration} seconds");
            await PeekMessages();
        }
        finally
        {
            isPeeking = false;
        }
    }

    // Message detail modal
    private void ShowMessageDetail(ServiceBusMessage message)
    {
        selectedMessage = message;
        showMessageDetailModal = true;
    }

    private void CloseMessageDetail()
    {
        showMessageDetailModal = false;
        selectedMessage = null;
    }

    // Batch operations
    private async Task DeleteMessages(List<long> sequenceNumbers)
    {
        if (!await ConfirmAction($"Delete {sequenceNumbers.Count} message(s)?"))
            return;

        isProcessingBatch = true;
        errorMessage = null;

        try
        {
            if (selectedQueueName != null)
            {
                await OperationsService.DeleteQueueMessagesAsync(NamespaceNameOnly, selectedQueueName, sequenceNumbers.ToArray(), isViewingDLQ);
            }
            else if (selectedTopicName != null && selectedSubscriptionName != null)
            {
                await OperationsService.DeleteSubscriptionMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, sequenceNumbers.ToArray(), isViewingDLQ);
            }
            
            // Remove deleted messages from the view
            peekedMessages.RemoveAll(m => m.SequenceNumber.HasValue && sequenceNumbers.Contains(m.SequenceNumber.Value));
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete messages: {ex.Message}";
            Console.WriteLine($"Delete error details: {ex}");
        }
        finally
        {
            isProcessingBatch = false;
        }
    }

    private async Task ResubmitMessages(List<long> sequenceNumbers)
    {
        if (!await ConfirmAction($"Resubmit {sequenceNumbers.Count} message(s) from DLQ?"))
            return;

        isProcessingBatch = true;
        errorMessage = null;

        try
        {
            if (selectedQueueName != null)
            {
                await OperationsService.ResendQueueMessagesAsync(NamespaceNameOnly, selectedQueueName, sequenceNumbers.ToArray(), true);
            }
            else if (selectedTopicName != null && selectedSubscriptionName != null)
            {
                await OperationsService.ResendSubscriptionMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, sequenceNumbers.ToArray(), true);
            }
            
            // Remove resubmitted messages from the view
            peekedMessages.RemoveAll(m => m.SequenceNumber.HasValue && sequenceNumbers.Contains(m.SequenceNumber.Value));
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to resubmit messages: {ex.Message}";
        }
        finally
        {
            isProcessingBatch = false;
        }
    }

    private async Task MoveToDLQMessages(List<long> sequenceNumbers)
    {
        if (!await ConfirmAction($"Move {sequenceNumbers.Count} message(s) to Dead Letter Queue?"))
            return;

        isProcessingBatch = true;
        errorMessage = null;

        try
        {
            if (selectedQueueName != null)
            {
                await OperationsService.MoveToDLQQueueMessagesAsync(NamespaceNameOnly, selectedQueueName, sequenceNumbers.ToArray());
            }
            else if (selectedTopicName != null && selectedSubscriptionName != null)
            {
                await OperationsService.MoveToDLQSubscriptionMessagesAsync(NamespaceNameOnly, selectedTopicName, selectedSubscriptionName, sequenceNumbers.ToArray());
            }
            
            // Remove moved messages from the view
            peekedMessages.RemoveAll(m => m.SequenceNumber.HasValue && sequenceNumbers.Contains(m.SequenceNumber.Value));
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to move messages to DLQ: {ex.Message}";
            Console.WriteLine($"Move to DLQ error details: {ex}");
        }
        finally
        {
            isProcessingBatch = false;
        }
    }

    // Single message operations
    private async Task DeleteSingleMessage(long sequenceNumber)
    {
        await DeleteMessages(new List<long> { sequenceNumber });
        CloseMessageDetail();
    }

    private async Task ResubmitSingleMessage(long sequenceNumber)
    {
        await ResubmitMessages(new List<long> { sequenceNumber });
        CloseMessageDetail();
    }

    private async Task MoveToDLQSingleMessage(long sequenceNumber)
    {
        await MoveToDLQMessages(new List<long> { sequenceNumber });
        CloseMessageDetail();
    }
}
